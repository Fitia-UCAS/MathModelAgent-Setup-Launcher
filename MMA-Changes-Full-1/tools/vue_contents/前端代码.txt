目录结构 (仅 .vue 文件):
|-- 文件夹: public
|-- 文件夹: src
|   |-- 文件夹: apis
|   |-- 文件夹: assets
|   |   |-- 文件夹: example
|   |-- 文件夹: components
|   |   |-- 文件夹: AgentEditor
|   |   |   |-- 文件: CoderEditor.vue
|   |   |   |-- 文件: ModelerEditor.vue
|   |   |   |-- 文件: WriterEditor.vue
|   |   |-- 文件夹: ui
|   |   |   |-- 文件夹: alert
|   |   |   |   |-- 文件: Alert.vue
|   |   |   |   |-- 文件: AlertDescription.vue
|   |   |   |   |-- 文件: AlertTitle.vue
|   |   |   |-- 文件夹: avatar
|   |   |   |   |-- 文件: Avatar.vue
|   |   |   |   |-- 文件: AvatarFallback.vue
|   |   |   |   |-- 文件: AvatarImage.vue
|   |   |   |-- 文件夹: breadcrumb
|   |   |   |   |-- 文件: Breadcrumb.vue
|   |   |   |   |-- 文件: BreadcrumbEllipsis.vue
|   |   |   |   |-- 文件: BreadcrumbItem.vue
|   |   |   |   |-- 文件: BreadcrumbLink.vue
|   |   |   |   |-- 文件: BreadcrumbList.vue
|   |   |   |   |-- 文件: BreadcrumbPage.vue
|   |   |   |   |-- 文件: BreadcrumbSeparator.vue
|   |   |   |-- 文件夹: button
|   |   |   |   |-- 文件: Button.vue
|   |   |   |-- 文件夹: card
|   |   |   |   |-- 文件: Card.vue
|   |   |   |   |-- 文件: CardContent.vue
|   |   |   |   |-- 文件: CardDescription.vue
|   |   |   |   |-- 文件: CardFooter.vue
|   |   |   |   |-- 文件: CardHeader.vue
|   |   |   |   |-- 文件: CardTitle.vue
|   |   |   |-- 文件夹: collapsible
|   |   |   |   |-- 文件: Collapsible.vue
|   |   |   |   |-- 文件: CollapsibleContent.vue
|   |   |   |   |-- 文件: CollapsibleTrigger.vue
|   |   |   |-- 文件夹: dialog
|   |   |   |   |-- 文件: Dialog.vue
|   |   |   |   |-- 文件: DialogClose.vue
|   |   |   |   |-- 文件: DialogContent.vue
|   |   |   |   |-- 文件: DialogDescription.vue
|   |   |   |   |-- 文件: DialogFooter.vue
|   |   |   |   |-- 文件: DialogHeader.vue
|   |   |   |   |-- 文件: DialogScrollContent.vue
|   |   |   |   |-- 文件: DialogTitle.vue
|   |   |   |   |-- 文件: DialogTrigger.vue
|   |   |   |-- 文件夹: dropdown-menu
|   |   |   |   |-- 文件: DropdownMenu.vue
|   |   |   |   |-- 文件: DropdownMenuCheckboxItem.vue
|   |   |   |   |-- 文件: DropdownMenuContent.vue
|   |   |   |   |-- 文件: DropdownMenuGroup.vue
|   |   |   |   |-- 文件: DropdownMenuItem.vue
|   |   |   |   |-- 文件: DropdownMenuLabel.vue
|   |   |   |   |-- 文件: DropdownMenuRadioGroup.vue
|   |   |   |   |-- 文件: DropdownMenuRadioItem.vue
|   |   |   |   |-- 文件: DropdownMenuSeparator.vue
|   |   |   |   |-- 文件: DropdownMenuShortcut.vue
|   |   |   |   |-- 文件: DropdownMenuSub.vue
|   |   |   |   |-- 文件: DropdownMenuSubContent.vue
|   |   |   |   |-- 文件: DropdownMenuSubTrigger.vue
|   |   |   |   |-- 文件: DropdownMenuTrigger.vue
|   |   |   |-- 文件夹: input
|   |   |   |   |-- 文件: Input.vue
|   |   |   |-- 文件夹: label
|   |   |   |   |-- 文件: Label.vue
|   |   |   |-- 文件夹: resizable
|   |   |   |   |-- 文件: ResizableHandle.vue
|   |   |   |   |-- 文件: ResizablePanelGroup.vue
|   |   |   |-- 文件夹: scroll-area
|   |   |   |   |-- 文件: ScrollArea.vue
|   |   |   |   |-- 文件: ScrollBar.vue
|   |   |   |-- 文件夹: select
|   |   |   |   |-- 文件: Select.vue
|   |   |   |   |-- 文件: SelectContent.vue
|   |   |   |   |-- 文件: SelectGroup.vue
|   |   |   |   |-- 文件: SelectItem.vue
|   |   |   |   |-- 文件: SelectItemText.vue
|   |   |   |   |-- 文件: SelectLabel.vue
|   |   |   |   |-- 文件: SelectScrollDownButton.vue
|   |   |   |   |-- 文件: SelectScrollUpButton.vue
|   |   |   |   |-- 文件: SelectSeparator.vue
|   |   |   |   |-- 文件: SelectTrigger.vue
|   |   |   |   |-- 文件: SelectValue.vue
|   |   |   |-- 文件夹: separator
|   |   |   |   |-- 文件: Separator.vue
|   |   |   |-- 文件夹: sheet
|   |   |   |   |-- 文件: Sheet.vue
|   |   |   |   |-- 文件: SheetClose.vue
|   |   |   |   |-- 文件: SheetContent.vue
|   |   |   |   |-- 文件: SheetDescription.vue
|   |   |   |   |-- 文件: SheetFooter.vue
|   |   |   |   |-- 文件: SheetHeader.vue
|   |   |   |   |-- 文件: SheetTitle.vue
|   |   |   |   |-- 文件: SheetTrigger.vue
|   |   |   |-- 文件夹: sidebar
|   |   |   |   |-- 文件: Sidebar.vue
|   |   |   |   |-- 文件: SidebarContent.vue
|   |   |   |   |-- 文件: SidebarFooter.vue
|   |   |   |   |-- 文件: SidebarGroup.vue
|   |   |   |   |-- 文件: SidebarGroupAction.vue
|   |   |   |   |-- 文件: SidebarGroupContent.vue
|   |   |   |   |-- 文件: SidebarGroupLabel.vue
|   |   |   |   |-- 文件: SidebarHeader.vue
|   |   |   |   |-- 文件: SidebarInput.vue
|   |   |   |   |-- 文件: SidebarInset.vue
|   |   |   |   |-- 文件: SidebarMenu.vue
|   |   |   |   |-- 文件: SidebarMenuAction.vue
|   |   |   |   |-- 文件: SidebarMenuBadge.vue
|   |   |   |   |-- 文件: SidebarMenuButton.vue
|   |   |   |   |-- 文件: SidebarMenuButtonChild.vue
|   |   |   |   |-- 文件: SidebarMenuItem.vue
|   |   |   |   |-- 文件: SidebarMenuSkeleton.vue
|   |   |   |   |-- 文件: SidebarMenuSub.vue
|   |   |   |   |-- 文件: SidebarMenuSubButton.vue
|   |   |   |   |-- 文件: SidebarMenuSubItem.vue
|   |   |   |   |-- 文件: SidebarProvider.vue
|   |   |   |   |-- 文件: SidebarRail.vue
|   |   |   |   |-- 文件: SidebarSeparator.vue
|   |   |   |   |-- 文件: SidebarTrigger.vue
|   |   |   |-- 文件夹: skeleton
|   |   |   |   |-- 文件: Skeleton.vue
|   |   |   |-- 文件夹: stepper
|   |   |   |   |-- 文件: Stepper.vue
|   |   |   |   |-- 文件: StepperDescription.vue
|   |   |   |   |-- 文件: StepperIndicator.vue
|   |   |   |   |-- 文件: StepperItem.vue
|   |   |   |   |-- 文件: StepperSeparator.vue
|   |   |   |   |-- 文件: StepperTitle.vue
|   |   |   |   |-- 文件: StepperTrigger.vue
|   |   |   |-- 文件夹: switch
|   |   |   |   |-- 文件: Switch.vue
|   |   |   |-- 文件夹: tabs
|   |   |   |   |-- 文件: Tabs.vue
|   |   |   |   |-- 文件: TabsContent.vue
|   |   |   |   |-- 文件: TabsList.vue
|   |   |   |   |-- 文件: TabsTrigger.vue
|   |   |   |-- 文件夹: tetris
|   |   |   |   |-- 文件: Tetris.vue
|   |   |   |-- 文件夹: textarea
|   |   |   |   |-- 文件: Textarea.vue
|   |   |   |-- 文件夹: toast
|   |   |   |   |-- 文件: Toast.vue
|   |   |   |   |-- 文件: ToastAction.vue
|   |   |   |   |-- 文件: ToastClose.vue
|   |   |   |   |-- 文件: ToastDescription.vue
|   |   |   |   |-- 文件: Toaster.vue
|   |   |   |   |-- 文件: ToastProvider.vue
|   |   |   |   |-- 文件: ToastTitle.vue
|   |   |   |   |-- 文件: ToastViewport.vue
|   |   |   |-- 文件夹: tooltip
|   |   |   |   |-- 文件: Tooltip.vue
|   |   |   |   |-- 文件: TooltipContent.vue
|   |   |   |   |-- 文件: TooltipProvider.vue
|   |   |   |   |-- 文件: TooltipTrigger.vue
|   |   |-- 文件: AppSidebar.vue
|   |   |-- 文件: Bubble.vue
|   |   |-- 文件: ChatArea.vue
|   |   |-- 文件: Files.vue
|   |   |-- 文件: LoginForm.vue
|   |   |-- 文件: ModelingExamples.vue
|   |   |-- 文件: NavUser.vue
|   |   |-- 文件: NotebookArea.vue
|   |   |-- 文件: NotebookCell.vue
|   |   |-- 文件: SearchForm.vue
|   |   |-- 文件: SystemMessage.vue
|   |   |-- 文件: Tree.vue
|   |   |-- 文件: UserStepper.vue
|   |   |-- 文件: VersionSwitcher.vue
|   |-- 文件夹: lib
|   |-- 文件夹: mock
|   |-- 文件夹: pages
|   |   |-- 文件夹: chat
|   |   |   |-- 文件夹: components
|   |   |   |   |-- 文件: ApiDialog.vue
|   |   |   |-- 文件: index.vue
|   |   |-- 文件夹: example
|   |   |   |-- 文件: [id].vue
|   |   |-- 文件夹: login
|   |   |   |-- 文件: index.vue
|   |   |-- 文件夹: task
|   |   |   |-- 文件: index.vue
|   |   |-- 文件夹: test
|   |   |   |-- 文件: index.vue
|   |   |   |-- 文件: testJupyter.vue
|   |   |-- 文件: index.vue
|   |-- 文件夹: router
|   |-- 文件夹: stores
|   |-- 文件夹: utils
|   |-- 文件: App.vue


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\App.vue 的内容:
================================================================================
<script setup lang="ts">
import Toaster from '@/components/ui/toast/Toaster.vue'
</script>

<template>
  <Toaster />
  <router-view />
</template>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\AppSidebar.vue 的内容:
================================================================================
<script setup lang="ts">
import { QQ_GROUP, TWITTER, GITHUB_LINK, BILLBILL, XHS } from '@/utils/const'
import NavUser from './NavUser.vue'

import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  type SidebarProps,
  SidebarRail,
} from '@/components/ui/sidebar'

const props = defineProps<SidebarProps>()

// This is sample data.
const data = {
  navMain: [
    {
      title: '开始',
      url: '#',
      items: [
        {
          title: '开始新任务',
          url: '#',
        },
      ],
    },
    {
      title: '历史任务',
      url: '#',
      items: [
        {
          title: 'Routing',
          url: '#',
        },
        {
          title: 'Data Fetching',
          url: '#',
          isActive: true,
        },
        {
          title: 'Rendering',
          url: '#',
        },
        {
          title: 'Caching',
          url: '#',
        },
        {
          title: 'Styling',
          url: '#',
        },
        {
          title: 'Optimizing',
          url: '#',
        },
        {
          title: 'Configuring',
          url: '#',
        },
        {
          title: 'Testing',
          url: '#',
        },
        {
          title: 'Authentication',
          url: '#',
        },
      ],
    },

  ],
}
</script>

<template>
  <Sidebar v-bind="props">
    <SidebarHeader>
      <!-- 图标 -->
      <div class="flex items-center gap-2 h-15">
        <router-link to="/" class="flex items-center gap-2">
          <img src="@/assets/icon.png" alt="logo" class="w-10 h-10">
          <div class="text-lg font-bold">MathModelAgent</div>
        </router-link>
      </div>
    </SidebarHeader>
    <SidebarContent>
      <SidebarGroup v-for="item in data.navMain" :key="item.title">
        <SidebarGroupLabel>{{ item.title }}</SidebarGroupLabel>
        <SidebarGroupContent>
          <SidebarMenu>
            <SidebarMenuItem v-for="childItem in item.items" :key="childItem.title">
              <SidebarMenuButton as-child :is-active="childItem.isActive">
                <a :href="childItem.url">{{ childItem.title }}</a>
              </SidebarMenuButton>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarGroupContent>
      </SidebarGroup>
    </SidebarContent>
    <SidebarRail />
    <SidebarFooter>
      <NavUser />
    </SidebarFooter>
    <SidebarFooter>
      <!-- 展示图标社交媒体  -->
      <div class="flex items-center gap-4 justify-center mt-2 mb-4 border-t  border-light-purple pt-3">
        <a :href="QQ_GROUP" target="_blank">
          <svg t="1746283023571" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"
            p-id="1612" width="30" height="30">
            <path
              d="M824.8 613.2c-16-51.4-34.4-94.6-62.7-165.3C766.5 262.2 689.3 112 511.5 112 331.7 112 256.2 265.2 261 447.9c-28.4 70.8-46.7 113.7-62.7 165.3-34 109.5-23 154.8-14.6 155.8 18 2.2 70.1-82.4 70.1-82.4 0 49 25.2 112.9 79.8 159-26.4 8.1-85.7 29.9-71.6 53.8 11.4 19.3 196.2 12.3 249.5 6.3 53.3 6 238.1 13 249.5-6.3 14.1-23.8-45.3-45.7-71.6-53.8 54.6-46.2 79.8-110.1 79.8-159 0 0 52.1 84.6 70.1 82.4 8.5-1.1 19.5-46.4-14.5-155.8z"
              p-id="1613"></path>
          </svg>
        </a>
        <a :href="TWITTER" target="_blank">
          <svg t="1746283115880" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"
            p-id="4345" width="30" height="30">
            <path
              d="M761.759375 122h132.320625L605 452.4003125 945.08 902H678.8L470.24 629.3196875 231.599375 902H99.2l309.1996875-353.4L82.16 122h273.0403125l188.52 249.24z m-46.4390625 700.8h73.32L315.359375 197.0403125h-78.680625z"
              fill="#2c2c2c" p-id="4346"></path>
          </svg>
        </a>
        <a :href="GITHUB_LINK" target="_blank">
          <svg t="1746283186324" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"
            p-id="5452" width="30" height="30">
            <path
              d="M511.957333 21.333333C241.024 21.333333 21.333333 240.981333 21.333333 512c0 216.832 140.544 400.725333 335.573334 465.664 24.490667 4.394667 32.256-10.069333 32.256-23.082667 0-11.690667 0.256-44.245333 0-85.205333-136.448 29.610667-164.736-64.64-164.736-64.64-22.314667-56.704-54.4-71.765333-54.4-71.765333-44.586667-30.464 3.285333-29.824 3.285333-29.824 49.194667 3.413333 75.178667 50.517333 75.178667 50.517333 43.776 75.008 114.816 53.333333 142.762666 40.789333 4.522667-31.658667 17.152-53.376 31.189334-65.536-108.970667-12.458667-223.488-54.485333-223.488-242.602666 0-53.546667 19.114667-97.322667 50.517333-131.669334-5.034667-12.330667-21.930667-62.293333 4.778667-129.834666 0 0 41.258667-13.184 134.912 50.346666a469.802667 469.802667 0 0 1 122.88-16.554666c41.642667 0.213333 83.626667 5.632 122.88 16.554666 93.653333-63.488 134.784-50.346667 134.784-50.346666 26.752 67.541333 9.898667 117.504 4.864 129.834666 31.402667 34.346667 50.474667 78.122667 50.474666 131.669334 0 188.586667-114.730667 230.016-224.042666 242.090666 17.578667 15.232 33.578667 44.672 33.578666 90.453334v135.850666c0 13.141333 7.936 27.605333 32.853334 22.869334C862.250667 912.597333 1002.666667 728.746667 1002.666667 512 1002.666667 240.981333 783.018667 21.333333 511.957333 21.333333z"
              p-id="5453"></path>
          </svg>
        </a>
        <a :href="BILLBILL" target="_blank">
          <svg t="1746283559641" class="icon" viewBox="0 0 1117 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"
            p-id="8888" width="30" height="30">
            <path
              d="M296.378 33.35l176.035 176.105h172.218L820.713 33.42a54.342 54.342 0 0 1 76.846 76.823l-99.304 99.212h113.291a190.068 190.068 0 0 1 190.045 190.068v434.409A190.068 190.068 0 0 1 911.523 1024H205.568A190.068 190.068 0 0 1 15.523 833.955V399.5a190.068 190.068 0 0 1 190.045-190.045H318.79l-99.258-99.305a54.319 54.319 0 1 1 76.846-76.847v0.047z m615.145 284.718H205.568a81.455 81.455 0 0 0-81.059 73.612l-0.396 7.82v434.408a81.455 81.455 0 0 0 73.635 81.083l7.82 0.395h705.955a81.455 81.455 0 0 0 81.059-73.658l0.395-7.796V399.5a81.455 81.455 0 0 0-81.454-81.455zM341.34 480.978a54.295 54.295 0 0 1 54.295 54.295v108.614a54.319 54.319 0 0 1-108.613 0V535.273a54.295 54.295 0 0 1 54.318-54.296z m434.409 0a54.295 54.295 0 0 1 54.318 54.295v108.614a54.295 54.295 0 0 1-108.613 0V535.273a54.295 54.295 0 0 1 54.295-54.296z"
              fill="#2c2c2c" p-id="8889"></path>
          </svg>
        </a>
        <a :href="XHS" target="_blank">
          <svg t="1746530966639" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg"
            p-id="5128" width="30" height="30">
            <path
              d="M996.152 56.513c-7.986-10.852-17.61-20.885-28.871-28.87C944.143 10.442 916.09 0 885.377 0H138.419c-30.715 0-59.176 10.443-82.314 27.642-10.852 7.986-20.885 17.61-28.87 28.87C10.444 79.448 0.001 107.703 0.001 138.623V885.58c0 30.715 10.442 59.176 27.641 81.905 7.986 10.852 17.61 20.885 28.871 28.87 23.138 17.2 51.19 27.643 81.904 27.643h746.959c30.714 0 59.175-10.443 81.904-27.642 10.852-7.986 20.885-17.61 28.87-28.87 17.2-23.139 27.643-51.19 27.643-81.905V138.622c0-30.92-10.852-59.175-27.642-82.11z m-629.633 410.54c16.38-36.241 34.81-71.87 52.213-107.497h59.995c-14.743 29.28-31.124 57.947-41.566 85.794 24.366-1.433 46.48-2.662 72.484-4.095-13.923 27.847-26.209 52.623-38.494 77.398-1.639 3.276-3.277 6.757-4.915 10.033-12.9 25.8-12.9 26.004 15.767 26.62 3.071 0 5.938 0.41 11.466 1.022-7.985 15.767-15.152 30.1-22.728 44.228-1.229 2.253-4.71 4.915-6.962 4.915-21.09 0-42.385 0.614-63.475-1.639-15.152-1.638-21.09-13.309-15.152-27.642 7.166-17.814 15.766-35.219 23.752-52.828 2.662-6.143 5.528-12.08 9.42-21.09-11.673 0-20.272 0.206-28.872 0-24.776-1.023-33.17-12.285-22.933-35.218zM76.171 658.299c-12.695-22.114-24.16-42.59-35.832-63.065 0-2.458 22.933-72.485 17.814-151.726h63.065s2.253 148.45-45.047 214.791z m147.222-7.985c0.614 37.061-24.98 37.061-24.98 37.061H162.17l-38.085-50.37h39.928v-277.45h59.994c0 90.915-0.204 199.846-0.614 290.76z m87.227 4.71c-28.666-25.186-44.227-100.333-43.818-211.925h59.175c-4.504 58.765 14.538 137.187 14.538 137.187s-17.404 38.495-29.895 74.737z m129.817 26.004c-1.638 3.071-6.757 5.938-10.443 6.142-27.847 0.41-55.9 0.205-87.842 0.205 12.081-24.16 22.114-43.818 30.92-61.018h95.621c-10.647 20.885-19.042 38.085-28.256 54.67z m244.481 6.552h-215.2c10.442-20.68 29.075-57.537 29.075-57.537h61.428V441.87h-38.29v-58.766h138.622v57.947h-37.88v189.196h62.245v57.333z m284.615-43.409c0 43.409-42.385 42.18-42.385 42.18h-55.285l-23.138-49.756 59.995 0.205s0.614-45.047 0-60.609c-0.41-13.105-7.576-21.5-20.886-21.704-26.618-0.615-53.442-0.205-82.722-0.205v132.274h-59.38V555.1h-59.995v-61.222h58.356v-51.804h-38.7v-57.947h39.315v-24.571h59.994l0.41 24.57h47.708s44.024-1.023 44.228 41.77c0.205 12.697 0.41 54.263 0.41 68.187 50.575-0.205 72.075 10.033 72.075 45.25V644.17z m-25.39-200.46H912.2v-30.507c0-11.057 5.528-21.295 14.947-27.233 10.647-6.757 25.39-11.057 39.314 2.252 0.614 0.41 1.024 1.024 1.433 1.638 19.247 20.27 4.095 53.852-23.752 53.852z"
              fill="#2c2c2c" p-id="5129"></path>
            <path d="M805.521 493.878h39.723v-52.01h-40.132z" fill="#2c2c2c" p-id="5130"></path>
          </svg>
        </a>
      </div>
    </SidebarFooter>
  </Sidebar>
</template>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\Bubble.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import type { HTMLAttributes } from 'vue'
import { marked } from 'marked'
import { computed } from 'vue'
import { AgentType } from '@/utils/enum'


interface BubbleProps {
  type: 'agent' | 'user'
  agentType?: AgentType
  class?: HTMLAttributes['class']
  content: string
}

const props = withDefaults(defineProps<BubbleProps>(), {
  type: 'user'
})

const renderedContent = computed(() => {
  return marked.parse(props.content)
})
</script>

<template>
  <div :class="[
    'bubble',
    props.type === 'user' ? 'bubble-user' : '',
    props.type === 'agent' && props.agentType === 'CoderAgent' ? 'bubble-coder' : '',
    props.type === 'agent' && props.agentType === 'WriterAgent' ? 'bubble-writer' : '',
    props.class
  ]">
    <div class="flex flex-col gap-1 flex-1">
      <!-- 头像在上方 -->
      <span v-if="props.type === 'user'" class="text-2xl select-none mb-1">🧑</span>
      <span v-else-if="props.type === 'agent' && props.agentType === 'CoderAgent'"
        class="text-2xl select-none mb-1">👨‍💻</span>
      <span v-else-if="props.type === 'agent' && props.agentType === 'WriterAgent'"
        class="text-2xl select-none mb-1">✍️</span>
      <!-- 气泡内容在下方 -->
      <div :class="cn(
        'max-w-[80%] rounded-2xl px-4 py-2 text-sm',
        props.type === 'user'
          ? 'bg-primary text-primary-foreground prose-invert'
          : 'bg-muted text-foreground',
        'prose prose-sm prose-slate max-w-none'
      )">
        <div v-html="renderedContent"></div>
      </div>
    </div>
  </div>
</template>

<style>
.prose {
  @apply text-inherit;
}

.prose p {
  @apply my-1;
}

.prose p:not(:first-child) {
  @apply mt-1;
}

.prose h1,
.prose h2,
.prose h3,
.prose h4 {
  @apply my-1 font-semibold;
}

.prose h1 {
  @apply text-lg;
}

.prose h2 {
  @apply text-base;
}

.prose h3,
.prose h4 {
  @apply text-sm;
}

.prose ul,
.prose ol {
  @apply my-1 pl-4;
}

.prose ul {
  @apply list-disc;
}

.prose ol {
  @apply list-decimal;
}

.prose li {
  @apply my-0.5;
}

.prose code {
  @apply px-1 py-0.5 rounded bg-black/10 dark:bg-white/10;
}

.prose pre {
  @apply p-2 my-1 rounded bg-black/10 dark:bg-white/10 overflow-x-auto;
  max-width: 100%;
  width: 100%;
}

.prose pre code {
  @apply bg-transparent p-0;
  @apply overflow-y-auto;
  max-width: 100%;
  white-space: pre-wrap;
  word-break: break-word;
}

.prose blockquote {
  @apply my-1 pl-3 border-l-2 border-current opacity-80 italic;
}

.prose a {
  @apply underline underline-offset-2 opacity-80 hover:opacity-100;
}

.prose img {
  @apply my-1 rounded-lg;
}

.prose table {
  @apply my-1 w-full;
}

.prose thead {
  @apply border-b border-current opacity-20;
}

.prose th {
  @apply p-2 text-left font-semibold;
}

.prose td {
  @apply p-2 border-t border-current opacity-10;
}

.prose-invert {
  @apply text-primary-foreground;
}

/* 确保透明度样式不会被继承 */
.prose thead *,
.prose td * {
  @apply opacity-100;
}

.bubble {
  display: flex;
  flex: 1 1 0%;
}

.bubble-user {
  justify-content: flex-end;
}

.bubble-coder,
.bubble-writer {
  justify-content: flex-start;
}

/* 用户气泡颜色 */
.bubble-user .prose {
  background: #2563eb;
  /* 蓝色 */
  color: #fff;
  box-shadow: 0 2px 8px rgba(37, 99, 235, 0.08);
  border: 1px solid #2563eb;
}

/* CoderAgent 气泡颜色 */
.bubble-coder .prose {
  background: #f1f5f9;
  /* 浅灰 */
  color: #0f172a;
  box-shadow: 0 2px 8px rgba(16, 185, 129, 0.08);
}

/* WriterAgent 气泡颜色 */
.bubble-writer .prose {
  background: #fef9c3;
  /* 浅黄 */
  color: #92400e;
  box-shadow: 0 2px 8px rgba(251, 191, 36, 0.08);
}
</style>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ChatArea.vue 的内容:
================================================================================
<script setup lang="ts">
import Bubble from './Bubble.vue'
import SystemMessage from './SystemMessage.vue'
import { ref } from 'vue'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Send } from 'lucide-vue-next'
import type { Message } from '@/utils/response'

const props = defineProps<{ messages: Message[] }>()

const inputValue = ref('')
const inputRef = ref<HTMLInputElement | null>(null)
const scrollRef = ref<HTMLDivElement | null>(null)

const sendMessage = () => {
  // 这里只处理本地 user 消息输入，如需和后端交互请在父组件处理
  if (!inputValue.value.trim()) return
  // 可以通过 emit 事件让父组件处理 user 消息
  inputValue.value = ''
  inputRef.value?.focus()
}
</script>

<template>
  <div class="flex h-full flex-col p-3">
    <div ref="scrollRef" class="flex-1 overflow-y-auto">
      <template v-for="message in props.messages" :key="message.id">
        <div class="mb-3">
          <!-- 用户消息 -->
          <Bubble v-if="message.msg_type === 'user'" type="user" :content="message.content || ''" />
          <!-- agent 消息（CoderAgent/WriterAgent，只显示 content） -->
          <Bubble v-else-if="message.msg_type === 'agent'" type="agent" :agentType="message.agent_type"
            :content="message.content || ''" />
          <!-- 系统消息 -->
          <SystemMessage v-else-if="message.msg_type === 'system'" :content="message.content || ''"
            :type="message.type" />
        </div>
      </template>
    </div>
    <form class="w-full max-w-2xl mx-auto flex items-center gap-2 pt-4" @submit.prevent="sendMessage">
      <Input ref="inputRef" v-model="inputValue" type="text" placeholder="请输入消息..." class="flex-1" autocomplete="off" />
      <Button type="submit" :disabled="!inputValue.trim()">
        <Send />
      </Button>
    </form>
  </div>
</template>

<style scoped>
/* 自定义滚动条样式 */
.overflow-y-auto::-webkit-scrollbar {
  width: 4px;
}

.overflow-y-auto::-webkit-scrollbar-track {
  @apply bg-transparent;
}

.overflow-y-auto::-webkit-scrollbar-thumb {
  @apply bg-gray-300 dark:bg-gray-600 rounded-full;
}

.overflow-y-auto::-webkit-scrollbar-thumb:hover {
  @apply bg-gray-400 dark:bg-gray-500;
}
</style>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\Files.vue 的内容:
================================================================================
<script setup lang="ts">
import { computed, ref, onMounted } from 'vue'
import Tree from '@/components/Tree.vue'
import { File } from 'lucide-vue-next'
import { useTaskStore } from '@/stores/task'
import { Sidebar, SidebarContent, SidebarGroup, SidebarFooter, SidebarProvider } from '@/components/ui/sidebar'
const taskStore = useTaskStore()
const isLoading = ref(true)
// 从消息中提取最新的文件列表
const files = taskStore.files as string[]

// 将文件列表转换为树形结构
const fileTree = computed(() => {
  // 无论files是否为空，只要计算属性被触发，就认为数据已加载完成
  isLoading.value = false

  // 直接返回文件列表，不做转换，因为Tree组件期望接收string或数组
  return files
})

// 添加超时机制，确保即使数据没有加载也会在一定时间后显示内容
onMounted(() => {
  // 3秒后无论如何都取消加载状态
  setTimeout(() => {
    isLoading.value = false
  }, 3000)
})

const handleFileClick = (file: string) => {
  // 处理文件点击
  console.log('File clicked:', file)
}

const handleFileDownload = (file: string) => {
  // 处理文件下载
  console.log('Download file:', file)
}
</script>

<template>
  <SidebarContent class="h-full">
    <SidebarGroup />
    <div class="h-full flex flex-col overflow-hidden">
      <div class="px-3 py-2 font-medium text-sm border-b">Files</div>
      <div class="flex-1 overflow-auto">
        <div v-if="isLoading" class="px-3 py-2 text-sm text-gray-500">
          加载中...
        </div>
        <div v-else-if="fileTree.length === 0" class="px-3 py-2 text-sm text-gray-500">
          暂无文件
        </div>
        <div v-else class="p-2">
          <Tree v-for="(item, index) in fileTree" :key="index" :item="item" @click="handleFileClick(item)"
            @download="handleFileDownload(item)" />
        </div>
      </div>
    </div>
    <SidebarGroup />
  </SidebarContent>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\LoginForm.vue 的内容:
================================================================================
<script setup lang="ts">
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
</script>

<template>
  <div class="flex flex-col gap-6">
    <Card class="overflow-hidden">
      <CardContent class="grid p-0 md:grid-cols-2">
        <form class="p-6 md:p-8">
          <div class="flex flex-col gap-6">
            <div class="flex flex-col items-center text-center">
              <h1 class="text-2xl font-bold">
                Welcome back
              </h1>
              <p class="text-balance text-muted-foreground">
                Login to your Acme Inc account
              </p>
            </div>
            <div class="grid gap-6">
              <div class="flex flex-col gap-4">
                <Button variant="outline" class="w-full">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path
                      d="M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701"
                      fill="currentColor" />
                  </svg>
                  Login with Apple
                </Button>
                <Button variant="outline" class="w-full">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path
                      d="M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
                      fill="currentColor" />
                  </svg>
                  Login with Google
                </Button>

                <Button variant="outline" class="w-full">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2.25" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-github">
                    <path
                      d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4" />
                    <path d="M9 18c-4.51 2-5-2-7-2" />
                  </svg>
                  Login with Github
                </Button>
              </div>

            </div>
          </div>
        </form>
        <div class="relative hidden bg-muted md:block">
          <!-- TODO: 图片 -->
          <img src="" alt="Image"
            class="absolute inset-0 h-full w-full object-cover dark:brightness-[0.2] dark:grayscale">
        </div>
      </CardContent>
    </Card>
    <div
      class="text-balance text-center text-xs text-muted-foreground [&_a]:underline [&_a]:underline-offset-4 hover:[&_a]:text-primary">
      By clicking continue, you agree to our <a href="#">Terms of Service</a>
      and <a href="#">Privacy Policy</a>.
    </div>
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ModelingExamples.vue 的内容:
================================================================================
<script setup lang="ts">
import { ref } from 'vue'
import { Button } from '@/components/ui/button'
import { useRouter } from 'vue-router'

// 导入图片资源
import huashuCupC from '@/assets/example/华数杯2023年C题.png'
import wuyiCupC from '@/assets/example/2025五一杯C题.png'
import mcmCupC from '@/assets/example/2024高教杯C题.png'
import { exampleAPI } from '@/apis/commonApi'

// 定义样例类型
interface ModelingExample {
  id: number
  title: string
  source: string
  description: string
  tags: string[]
  problemText: string
  image: string
}

const router = useRouter()
const examples = ref<ModelingExample[]>([
  {
    id: 1,
    title: "母亲身心健康对婴儿成长的影响",
    source: "2023华数杯C题",
    description: "研究母亲身心健康对婴儿成长的影响",
    tags: ["分类问题", "成长", "健康"],
    problemText: "给定母亲身心健康数据，建立一个预测模型，预测婴儿成长情况。",
    image: huashuCupC
  },
  {
    id: 2,
    title: "社交媒体平台用户分析问题",
    source: "2025五一杯C题",
    description: "分析社交媒体平台用户行为特征",
    tags: ["社交媒体", "用户行为"],
    problemText: "分析社交媒体平台用户行为特征，构建用户画像模型。",
    image: wuyiCupC
  },
  {
    id: 3,
    title: "农作物的种植策略",
    source: "2024高教杯C题",
    description: "研究农作物的种植策略",
    tags: ["种植策略", "农作物", "生长"],
    problemText: "研究农作物的种植策略，建立一个优化模型，使得农作物产量最大化。",
    image: mcmCupC
  }
])

// 选择样例并跳转到任务创建步骤
const selectExample = async (example: ModelingExample) => {
  const res = await exampleAPI(example.id.toString(), example.source)
  const task_id = res?.data?.task_id
  router.push(`/task/${task_id}`)
}

</script>

<template>
  <div class="mt-8 mb-12">
    <h2 class="text-xl font-medium mb-4">样例解析</h2>
    <p class="text-sm text-muted-foreground mb-6">浏览历年数模竞赛优秀案例，快速开始你的建模任务</p>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <div v-for="example in examples" :key="example.id"
        class="border rounded-lg overflow-hidden hover:shadow-md transition-shadow group">
        <!-- 题目缩略图 -->
        <div class="relative h-48 overflow-hidden bg-muted">
          <img :src="example.image" alt="题目缩略图"
            class="w-full h-full object-cover object-top group-hover:scale-105 transition-transform duration-300" />
          <div
            class="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
            <Button variant="secondary" size="sm" @click="selectExample(example)">
              查看详情
            </Button>
          </div>
        </div>

        <!-- 题目信息 -->
        <div class="p-4">
          <div class="flex justify-between items-start mb-2">
            <h3 class="font-medium line-clamp-2">{{ example.title }}</h3>
            <span class="text-xs px-2 py-0.5 bg-primary/10 text-primary rounded-full">
              {{ example.tags[0] }}
            </span>
          </div>
          <p class="text-xs text-muted-foreground mb-2">{{ example.source }}</p>
          <p class="text-sm text-muted-foreground mb-4 line-clamp-2">{{ example.description }}</p>

          <!-- 标签 -->
          <div class="flex flex-wrap gap-1 mb-4">
            <span v-for="(tag, _) in example.tags.slice(1)" :key="tag"
              class="px-2 py-0.5 bg-muted text-muted-foreground rounded-full text-xs">
              {{ tag }}
            </span>
          </div>

          <!-- 按钮 -->
          <Button variant="default" size="sm" class="w-full" @click="selectExample(example)">
            使用该案例
          </Button>
        </div>
      </div>
    </div>
  </div>
</template>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\NavUser.vue 的内容:
================================================================================
<script setup lang="ts">
import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from '@/components/ui/avatar'

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from '@/components/ui/sidebar'
import {
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
  KeyRound,
} from 'lucide-vue-next'
import { ref } from 'vue'
import ApiKeyDialog from '@/pages/chat/components/ApiDialog.vue'

const props = defineProps({
  user: {
    type: Object,
    default: () => ({
      name: 'San Jin',
      email: 'mathmodel@mathmodel.com',
      avatar: 'https://github.com/jihe520.png'
    })
  }
})

const { isMobile } = useSidebar()


// API Key 对话框控制
const isApiKeyDialogOpen = ref(false)

const openApiKeyDialog = () => {
  isApiKeyDialogOpen.value = true
}

</script>

<template>
  <SidebarMenu>
    <SidebarMenuItem>
      <DropdownMenu>
        <DropdownMenuTrigger as-child>
          <SidebarMenuButton size="lg"
            class="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground">
            <Avatar class="h-8 w-8 rounded-lg">
              <AvatarImage :src="props.user.avatar" :alt="props.user.name" />
              <AvatarFallback class="rounded-lg">
                CN
              </AvatarFallback>
            </Avatar>
            <div class="grid flex-1 text-left text-sm leading-tight">
              <span class="truncate font-semibold">{{ user.name }}</span>
              <span class="truncate text-xs">{{ user.email }}</span>
            </div>
            <ChevronsUpDown class="ml-auto size-4" />
          </SidebarMenuButton>
        </DropdownMenuTrigger>
        <DropdownMenuContent class="w-[--reka-dropdown-menu-trigger-width] min-w-56 rounded-lg"
          :side="isMobile ? 'bottom' : 'right'" align="end" :side-offset="4">
          <DropdownMenuLabel class="p-0 font-normal">
            <div class="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
              <Avatar class="h-8 w-8 rounded-lg">
                <AvatarImage :src="user.avatar" :alt="user.name" />
                <AvatarFallback class="rounded-lg">
                  CN
                </AvatarFallback>
              </Avatar>
              <div class="grid flex-1 text-left text-sm leading-tight">
                <span class="truncate font-semibold">{{ user.name }}</span>
                <span class="truncate text-xs">{{ user.email }}</span>
              </div>
            </div>
          </DropdownMenuLabel>
          <DropdownMenuSeparator />
          <DropdownMenuGroup>
            <DropdownMenuItem @click="openApiKeyDialog">
              <KeyRound />
              API Key
            </DropdownMenuItem>
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <DropdownMenuGroup>
            <DropdownMenuItem>
              <BadgeCheck />
              Account
            </DropdownMenuItem>
            <DropdownMenuItem>
              <CreditCard />
              Billing
            </DropdownMenuItem>
            <DropdownMenuItem>
              <Bell />
              Notifications
            </DropdownMenuItem>
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          <DropdownMenuItem>
            <LogOut />
            Log out
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </SidebarMenuItem>
  </SidebarMenu>
  <ApiKeyDialog v-model:open="isApiKeyDialogOpen" />

</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\NotebookArea.vue 的内容:
================================================================================
<script setup lang="ts">
import { computed } from 'vue'
import { useTaskStore } from '@/stores/task'
import NotebookCell from '@/components/NotebookCell.vue'
import type { NoteCell, CodeCell, ResultCell } from '@/utils/interface'

// 使用任务存储
const taskStore = useTaskStore()
console.log('interpreterMessage:', taskStore.interpreterMessage)
// 将代码消息转换为Notebook单元格
const cells = computed<NoteCell[]>(() => {
  const notebookCells: NoteCell[] = []

  // 获取代码执行工具消息，按顺序处理
  for (const toolMsg of taskStore.interpreterMessage) {
    console.log('Code execute message:', toolMsg)

    // 处理代码输入消息
    if (toolMsg.input && toolMsg.input.code) {
      const codeCell: CodeCell = {
        type: 'code',
        content: toolMsg.input.code
      }
      notebookCells.push(codeCell)
    }

    // 处理执行结果消息
    if (toolMsg.output && toolMsg.output.length > 0) {
      const resultCell: ResultCell = {
        type: 'result',
        code_results: toolMsg.output
      }
      notebookCells.push(resultCell)
    }
  }

  return notebookCells
})
</script>

<template>
  <div class="flex-1 px-1 pt-1 pb-4 h-full overflow-y-auto">
    <!-- 遍历所有单元格 -->
    <div v-for="(cell, index) in cells" :key="index" :class="[
      'transform transition-all duration-200 hover:shadow-lg',
      cell.type === 'code' ? 'pt-2' : 'pt-0'
    ]">
      <NotebookCell :cell="cell" />
    </div>

    <!-- 无内容时的提示 -->
    <div v-if="cells.length === 0" class="flex items-center justify-center h-full">
      <div class="text-gray-400 text-center p-8">
        <div class="text-4xl mb-2">📝</div>
        <div class="text-lg font-medium">暂无代码执行结果</div>
        <div class="text-sm">执行代码后将在此显示结果</div>
      </div>
    </div>
    <!-- 添加底部空间 -->
    <div class="h-4"></div>
  </div>
</template>

<style>
/* 自定义滚动条 */
::-webkit-scrollbar {
  width: 0.375rem;
  height: 0.375rem;
}

::-webkit-scrollbar-track {
  background-color: rgb(243 244 246);
  border-radius: 9999px;
}

::-webkit-scrollbar-thumb {
  background-color: rgb(209 213 219);
  border-radius: 9999px;
}

::-webkit-scrollbar-thumb:hover {
  background-color: rgb(156 163 175);
  transition-property: background-color;
  transition-duration: 200ms;
}

/* 代码高亮样式 */
.hljs {
  background-color: rgb(249 250 251);
  padding: 1rem;
  border-radius: 0.5rem;
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
}

/* 数学公式样式 */
.katex-display {
  margin-top: 1rem;
  margin-bottom: 1rem;
  overflow-x: auto;
}

.katex {
  font-size: 1rem;
}
</style>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\NotebookCell.vue 的内容:
================================================================================
<script setup lang="ts">
import type { CodeExecutionResult } from '@/utils/response'
import { renderMarkdown } from '@/utils/markdown'
import type { NoteCell, CodeCell, ResultCell } from '@/utils/interface'

defineProps<{
  cell: NoteCell
}>()

// 获取结果格式的CSS类
const getResultClass = (result: CodeExecutionResult) => {
  switch (result.res_type) {
    case 'stdout':
      return 'text-gray-600'
    case 'stderr':
      return 'text-orange-600'
    case 'error':
      return 'text-red-600'
    default:
      return 'text-gray-800'
  }
}

// 判断结果是否为图片
const isImageResult = (result: CodeExecutionResult) => {
  return result.res_type === 'result' && 
    ['png', 'jpeg', 'svg'].includes(result.format as string)
}

// 判断结果是否为LaTeX
const isLatexResult = (result: CodeExecutionResult) => {
  return result.res_type === 'result' && result.format === 'latex'
}

// 判断结果是否为JSON
const isJsonResult = (result: CodeExecutionResult) => {
  return result.res_type === 'result' && result.format === 'json'
}

// 格式化JSON显示
const formatJson = (jsonString: string) => {
  try {
    const parsed = JSON.parse(jsonString)
    return JSON.stringify(parsed, null, 2)
  } catch (e) {
    return jsonString
  }
}

// 渲染Markdown内容
const renderMarkdownContent = (content: string) => {
  return renderMarkdown(content)
}

// 类型守卫函数，用于区分单元格类型
const isCodeCell = (cell: NoteCell): cell is CodeCell => {
  return cell.type === 'code'
}

const isResultCell = (cell: NoteCell): cell is ResultCell => {
  return cell.type === 'result'
}
</script>

<template>
  <div :class="[
    'bg-white rounded-lg shadow-sm overflow-hidden',
    'border border-gray-200 hover:border-blue-300',
    cell.type === 'code' ? 'code-cell' : 'result-cell'
  ]">
    <!-- 单元格头部 -->
    <div
      class="px-3 py-1 flex items-center justify-between bg-gradient-to-r from-gray-50 to-white border-b border-gray-200">
      <div class="flex items-center space-x-2">
        <span :class="[
          'px-2 py-1 rounded text-xs font-medium',
          cell.type === 'code' ? 'bg-blue-50 text-blue-600' : 'bg-green-50 text-green-600'
        ]">
          {{ cell.type === 'code' ? 'Code' : 'Result' }}
        </span>
      </div>
    </div>

    <!-- 代码内容 -->
    <div class="relative">
      <!-- 代码单元格 -->
      <template v-if="isCodeCell(cell)">
        <div class="p-4 font-mono relative group">
          <pre class="text-sm overflow-x-auto"><code>{{ cell.content }}</code></pre>
        </div>
      </template>

      <!-- 结果单元格 -->
      <template v-else-if="isResultCell(cell)">
        <div class="px-4 py-3 bg-gray-50">
          <div class="text-xs font-medium text-gray-500 mb-2">输出:</div>
          
          <!-- 遍历所有执行结果 -->
          <div v-for="(result, index) in cell.code_results" :key="index" class="mb-2 last:mb-0">
            <!-- 标准输出/错误 -->
            <template v-if="result.res_type === 'stdout' || result.res_type === 'stderr'">
              <div :class="['font-mono whitespace-pre-wrap text-sm', getResultClass(result)]">
                {{ result.msg }}
              </div>
            </template>
            
            <!-- 执行错误 -->
            <template v-else-if="result.res_type === 'error'">
              <div class="text-sm text-red-600 font-mono whitespace-pre-wrap">
                <div class="font-bold">{{ result.name }}: {{ result.value }}</div>
                <div>{{ result.traceback }}</div>
              </div>
            </template>
            
            <!-- 执行结果 - 图片 (PNG, JPEG, SVG) -->
            <template v-else-if="isImageResult(result)">
              <img :src="`data:image/${result.format};base64,${result.msg}`" 
                   class="max-w-full rounded-lg shadow-sm" />
            </template>
            
            <!-- 执行结果 - HTML -->
            <template v-else-if="result.res_type === 'result' && result.format === 'html'">
              <div class="prose prose-sm max-w-none" v-html="result.msg || ''"></div>
            </template>
            
            <!-- 执行结果 - Markdown -->
            <template v-else-if="result.res_type === 'result' && result.format === 'markdown'">
              <div class="prose prose-sm max-w-none" v-html="renderMarkdownContent(result.msg || '')"></div>
            </template>
            
            <!-- 执行结果 - LaTeX -->
            <template v-else-if="isLatexResult(result)">
              <div class="katex-display" v-html="result.msg || ''"></div>
            </template>
            
            <!-- 执行结果 - JSON -->
            <template v-else-if="isJsonResult(result)">
              <pre class="text-sm bg-gray-50 p-2 rounded overflow-x-auto">{{ formatJson(result.msg || '') }}</pre>
            </template>
            
            <!-- 执行结果 - 默认文本 -->
            <template v-else>
              <div class="text-sm text-gray-600 font-mono whitespace-pre-wrap">
                {{ result.msg }}
              </div>
            </template>
          </div>
        </div>
      </template>
    </div>
  </div>
</template>

<style scoped>
/* 代码样式 */
.code-cell pre {
  background-color: rgb(249 250 251);
  border-radius: 0.375rem;
  padding: 0.5rem;
}

.code-cell code {
  color: rgb(31 41 55);
}

/* 结果样式 */
.result-cell {
  margin-top: -0.25rem;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
</style>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\SearchForm.vue 的内容:
================================================================================
<script setup lang="ts">
import { Label } from '@/components/ui/label'
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarInput,
} from '@/components/ui/sidebar'
import { Search } from 'lucide-vue-next'
</script>

<template>
  <form>
    <SidebarGroup class="py-0">
      <SidebarGroupContent class="relative">
        <Label for="search" class="sr-only">
          Search
        </Label>
        <SidebarInput
          id="search"
          placeholder="Search the docs..."
          class="pl-8"
        />
        <Search class="pointer-events-none absolute left-2 top-1/2 size-4 -translate-y-1/2 select-none opacity-50" />
      </SidebarGroupContent>
    </SidebarGroup>
  </form>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\SystemMessage.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import type { HTMLAttributes } from 'vue'

interface SystemMessageProps {
  class?: HTMLAttributes['class']
  content: string
  type?: 'info' | 'warning' | 'success' | 'error'
}

const props = withDefaults(defineProps<SystemMessageProps>(), {
  type: 'info'
})

const typeStyles = {
  info: 'text-blue-500 dark:text-blue-400 bg-blue-500/5 border-blue-500/10',
  warning: 'text-yellow-500 dark:text-yellow-400 bg-yellow-500/5 border-yellow-500/10',
  success: 'text-green-500 dark:text-green-400 bg-green-500/5 border-green-500/10',
  error: 'text-red-500 dark:text-red-400 bg-red-500/5 border-red-500/10'
}
</script>

<template>
  <div class="flex justify-center my-2">
    <div :class="cn(
      'inline-flex items-center gap-1.5 px-3 py-1 text-xs rounded-full border',
      typeStyles[props.type],
      props.class
    )">
      <!-- 不同类型的图标 -->
      <svg v-if="props.type === 'info'" class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10" />
        <path d="M12 16v-4" />
        <path d="M12 8h.01" />
      </svg>
      <svg v-else-if="props.type === 'warning'" class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
        <path d="M12 9v4" />
        <path d="M12 17h.01" />
      </svg>
      <svg v-else-if="props.type === 'success'" class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14" />
        <path d="M22 4L12 14.01l-3-3" />
      </svg>
      <svg v-else-if="props.type === 'error'" class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10" />
        <path d="M15 9l-6 6" />
        <path d="M9 9l6 6" />
      </svg>

      <span class="leading-none">{{ props.content }}</span>
    </div>
  </div>
</template>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\Tree.vue 的内容:
================================================================================
<script setup lang="ts">
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible'
import {
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
} from '@/components/ui/sidebar'
import { ChevronRight, File, Folder } from 'lucide-vue-next'
const props = defineProps<{
  item: string | any[]
}>()
const [name, ...items] = Array.isArray(props.item) ? props.item : [props.item]
</script>

<template>
  <SidebarMenuButton v-if="!items.length" :is-active="name === 'button.tsx'" class="data-[active=true]:bg-transparent">
    <File />
    {{ name }}
  </SidebarMenuButton>
  <SidebarMenuItem v-else>
    <Collapsible class="group/collapsible [&[data-state=open]>button>svg:first-child]:rotate-90"
      :default-open="name === 'components' || name === 'ui'">
      <CollapsibleTrigger as-child>
        <SidebarMenuButton>
          <ChevronRight class="transition-transform" />
          <Folder />
          {{ name }}
        </SidebarMenuButton>
      </CollapsibleTrigger>
      <CollapsibleContent>
        <SidebarMenuSub>
          <Tree v-for="(subItem, index) in items" :key="index" :item="subItem" />
        </SidebarMenuSub>
      </CollapsibleContent>
    </Collapsible>
  </SidebarMenuItem>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\UserStepper.vue 的内容:
================================================================================
<script setup lang="ts">
import { ref } from 'vue'
import { Button } from '@/components/ui/button'
import { FileUp } from 'lucide-vue-next'
import { Textarea } from '@/components/ui/textarea'
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { submitModelingTask } from '@/apis/submitModelingApi'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { Rocket } from 'lucide-vue-next'
import { useRouter } from 'vue-router'
import { useTaskStore } from '@/stores/task'
import { useToast } from '@/components/ui/toast'
import { useApiKeyStore } from '@/stores/apiKeys'
import { saveApiConfig } from '@/apis/apiKeyApi'

const taskStore = useTaskStore()
const { toast } = useToast()
const apiKeyStore = useApiKeyStore()
const currentStep = ref(1)
const fileUploaded = ref(true)

// 表单数据
const uploadedFiles = ref<File[]>([])
const question = ref('')
const selectedOptions = ref({
  template: '国赛',
  language: '中文',
  format: 'Markdown',
})

const selectConfig = [
  {
    key: '模板',
    label: '选择模板',
    options: ['国赛', '美赛'],
  },
  {
    key: '语言',
    label: '选择语言',
    options: ['中文', '英文'],
  },
  {
    key: '格式',
    label: '选择格式',
    options: ['Markdown', 'LaTeX'],
  },
]

// 添加状态控制
const showUploadSuccess = ref(false)

// 提交任务
const showSubmitSuccess = ref(false)

const taskId = ref<string | null>(null)

// 添加 fileInput 的类型声明
const fileInput = ref<HTMLInputElement | null>(null)

const nextStep = () => {
  if (currentStep.value < 2)
    currentStep.value++
}

const prevStep = () => {
  if (currentStep.value > 1)
    currentStep.value--
}

// 修改文件上传处理
const handleFileUpload = (event: Event) => {
  const input = event.target as HTMLInputElement
  if (input.files && input.files.length > 0) {
    uploadedFiles.value = Array.from(input.files)
    fileUploaded.value = true
    showUploadSuccess.value = true // 显示提示
    setTimeout(() => {
      showUploadSuccess.value = false // 3秒后自动隐藏
    }, 1000)
  }
}

const router = useRouter()


const handleSubmit = async () => {
  try {

    if (apiKeyStore.isEmpty) {
      toast({
        title: '请先配置 API Key',
        description: '在侧边栏 -> 头像 -> API Key 中配置 API Key',
        variant: 'destructive',
      })
      return
    }

    // 保存 API Key
    await saveApiConfig({
      coordinator: apiKeyStore.coordinatorConfig,
      modeler: apiKeyStore.modelerConfig,
      coder: apiKeyStore.coderConfig,
      writer: apiKeyStore.writerConfig
    })




    if (uploadedFiles.value.length === 0) {
      toast({
        title: '请先上传文件',
        description: '请先上传文件',
        variant: 'destructive',
      })
      return
    }
    console.log(selectedOptions.value)
    console.log(question.value)
    console.log(uploadedFiles.value)
    const response = await submitModelingTask(
      {
        ques_all: question.value,
        comp_template: selectedOptions.value.template,
        format_output: selectedOptions.value.format
      },
      uploadedFiles.value
    )

    taskId.value = response?.data?.task_id ?? null
    taskStore.addUserMessage(question.value)

    showSubmitSuccess.value = true
    setTimeout(() => {
      showSubmitSuccess.value = false // 3秒后自动隐藏
    }, 3000)
    router.push(`/task/${taskId.value}`)
    toast({
      title: '任务提交成功',
      description: '任务提交成功，编号为：' + taskId.value,
    })
  } catch (error) {
    console.error('任务提交失败:', error)
    toast({
      title: '任务提交失败',
      description: '请检查 API Key 是否正确',
      variant: 'destructive',
    })
  }
}
</script>

<template>
  <div class="w-full max-w-xl mx-auto relative">
    <!-- 使用 Alert 组件 -->
    <Transition name="fade">
      <div v-if="showUploadSuccess" class="fixed top-4 right-4 z-50">
        <Alert>
          <Rocket class="h-4 w-4" />
          <AlertTitle>文件上传成功！</AlertTitle>
          <AlertDescription>
            已成功上传 {{ uploadedFiles.length }} 个文件，请继续下一步操作。
          </AlertDescription>
        </Alert>
      </div>
    </Transition>

    <Transition name="fade">
      <div v-if="showSubmitSuccess" class="fixed top-4 right-4 z-50">
        <Alert>
          <Rocket class="h-4 w-4" />
          <AlertTitle>任务提交成功！</AlertTitle>
          <AlertDescription>
            任务提交成功，编号为：{{ taskId }}。
          </AlertDescription>
        </Alert>
      </div>
    </Transition>

    <div class="border rounded-lg shadow-sm">
      <!-- Step 1: File Upload -->
      <div v-if="currentStep === 1" class="p-6">
        <div
          class="border-2 border-dashed rounded-lg p-8 text-center hover:border-primary/50 transition-colors cursor-pointer"
          @click="() => fileInput?.click()">
          <input type="file" ref="fileInput" class="hidden" @change="handleFileUpload" accept=".txt,.csv,.xlsx"
            multiple>
          <div class="mx-auto w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center">
            <FileUp class="w-6 h-6 text-primary" />
          </div>
          <div>
            <p class="text-lg font-medium">拖拽数据集到此处或点击上传</p>
            <p class="text-sm text-muted-foreground mt-1">
              支持 .txt, .csv, .xlsx 等格式文件（可多选）
            </p>
            <div v-if="uploadedFiles.length > 0" class="text-sm text-green-600 mt-1">
              已上传文件:
              <ul>
                <li v-for="(file, index) in uploadedFiles" :key="index">
                  {{ file.name }}
                </li>
              </ul>
            </div>
          </div>
        </div>
        <div class="mt-4 flex justify-end">
          <Button :disabled="!fileUploaded" @click="nextStep" size="sm">
            下一步
          </Button>
        </div>
      </div>

      <!-- Step 2: Question Input -->
      <div v-if="currentStep === 2" class="p-6">
        <div class="space-y-4">
          <div class="space-y-1">
            <h4 class="text-sm font-medium mb-2">粘贴完整题目</h4>
            <Textarea v-model="question" placeholder="PDF 中完整题目背景和多个小问" class="min-h-[120px]" />
          </div>

          <div class="grid grid-cols-3 gap-3">
            <div v-for="item in selectConfig" :key="item.key">
              <Select v-model="selectedOptions[item.key.toLowerCase() as keyof typeof selectedOptions]"
                :defaultValue="item.options[0].toLowerCase()">
                <SelectTrigger class="h-9">
                  <SelectValue :placeholder="item.label" />
                </SelectTrigger>
                <SelectContent>
                  <SelectGroup>
                    <SelectLabel>{{ item.key }}</SelectLabel>
                    <SelectItem v-for="option in item.options" :key="option" :value="option.toLowerCase()">
                      {{ option }}
                    </SelectItem>
                  </SelectGroup>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>
        <div class="mt-4 flex justify-between">
          <Button variant="outline" @click="prevStep" size="sm">
            上一步
          </Button>
          <Button @click="handleSubmit" size="sm">
            开始分析
          </Button>
        </div>
      </div>
    </div>
  </div>
</template>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\VersionSwitcher.vue 的内容:
================================================================================
<script setup lang="ts">
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'

import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from '@/components/ui/sidebar'
import { Check, ChevronsUpDown, GalleryVerticalEnd } from 'lucide-vue-next'

import { ref } from 'vue'

const props = defineProps<{
  versions: string[]
  defaultVersion: string
}>()

const selectedVersion = ref(props.defaultVersion)
</script>

<template>
  <SidebarMenu>
    <SidebarMenuItem>
      <DropdownMenu>
        <DropdownMenuTrigger as-child>
          <SidebarMenuButton size="lg"
            class="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground">
            <div
              class="flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground">
              <GalleryVerticalEnd class="size-4" />
            </div>
            <div class="flex flex-col gap-0.5 leading-none">
              <span class="font-semibold">Documentation</span>
              <span class="">v{{ selectedVersion }}</span>
            </div>
            <ChevronsUpDown class="ml-auto" />
          </SidebarMenuButton>
        </DropdownMenuTrigger>
        <DropdownMenuContent class="w-[--reka-dropdown-menu-trigger-width]" align="start">
          <DropdownMenuItem v-for="version in versions" :key="version" @select="selectedVersion = version">
            v{{ version }}
            <Check v-if="version === selectedVersion" class="ml-auto" />
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </SidebarMenuItem>
  </SidebarMenu>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\AgentEditor\CoderEditor.vue 的内容:
================================================================================
<script setup lang="ts">
import NotebookArea from '@/components/NotebookArea.vue'
</script>

<template>
  <div class="h-full flex flex-col p-4">
    <div class="h-full bg-white rounded-lg border shadow-sm">
      <div class="border-b px-4 py-3">
        <h2 class="text-lg font-semibold text-gray-900">代码执行</h2>
      </div>
      <div class="h-full pb-14">
        <NotebookArea class="h-full" />
      </div>
    </div>
  </div>
</template>

<style scoped>
::-webkit-scrollbar {
  display: none;
  /* 或者 width: 0; height: 0; */
}
</style>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\AgentEditor\ModelerEditor.vue 的内容:
================================================================================
<script setup lang="ts">
import { computed } from 'vue'
import { useTaskStore } from '@/stores/task'
import { Separator } from '@/components/ui/separator'
import { ScrollArea } from '@/components/ui/scroll-area'

const taskStore = useTaskStore()

// 获取最新的CoordinatorMessage
const latestCoordinatorMessage = computed(() => {
  const messages = taskStore.coordinatorMessages
  return messages.length > 0 ? messages[messages.length - 1] : null
})

// 解析CoordinatorMessage的JSON内容
const coordinatorData = computed(() => {
  if (!latestCoordinatorMessage.value?.content) return null

  try {
    const content = latestCoordinatorMessage.value.content
    // 移除可能的```json标记
    const cleanContent = content.replace(/```json\n?/, '').replace(/```$/, '').trim()
    return JSON.parse(cleanContent)
  } catch (error) {
    console.error('解析CoordinatorMessage失败:', error)
    return null
  }
})

// 获取最新的ModelerMessage
const latestModelerMessage = computed(() => {
  const messages = taskStore.modelerMessages
  return messages.length > 0 ? messages[messages.length - 1] : null
})

// 解析ModelerMessage的JSON内容
const modelerData = computed(() => {
  if (!latestModelerMessage.value?.content) return null

  try {
    const content = latestModelerMessage.value.content
    // 移除可能的```json标记
    const cleanContent = content.replace(/```json\n?/, '').replace(/```$/, '').trim()
    return JSON.parse(cleanContent)
  } catch (error) {
    console.error('解析ModelerMessage失败:', error)
    return null
  }
})

// 生成问题列表
const questionsList = computed(() => {
  if (!coordinatorData.value) return []

  const questions = []
  for (let i = 1; i <= coordinatorData.value.ques_count; i++) {
    const quesKey = `ques${i}`
    if (coordinatorData.value[quesKey]) {
      questions.push({
        number: i,
        content: coordinatorData.value[quesKey]
      })
    }
  }
  return questions
})
</script>

<template>
  <div class="h-full flex flex-col p-4">
    <!-- 上半部分：CoordinatorMessage 结构化信息 -->
    <div class="h-1/2 mb-4 bg-white rounded-lg border shadow-sm">
      <div class="border-b px-4 py-3">
        <h2 class="text-lg font-semibold text-gray-900">题目信息</h2>
      </div>
      <div class="h-full pb-14">
        <ScrollArea class="h-full">
          <div class="p-4 space-y-4">
            <div v-if="coordinatorData">
              <!-- 题目标题 -->
              <div class="space-y-2">
                <h3 class="text-base font-medium text-gray-700">题目标题</h3>
                <div class="text-lg font-semibold text-gray-900">
                  {{ coordinatorData.title }}
                </div>
              </div>

              <Separator />

              <!-- 题目背景 -->
              <div class="space-y-2">
                <h3 class="text-base font-medium text-gray-700">题目背景</h3>
                <div class="text-sm text-gray-800 leading-relaxed whitespace-pre-wrap">
                  {{ coordinatorData.background }}
                </div>
              </div>

              <Separator />

              <!-- 问题数量和问题列表 -->
              <div class="space-y-2">
                <div class="flex items-center gap-2">
                  <h3 class="text-base font-medium text-gray-700">问题列表</h3>
                  <span class="px-2 py-1 text-xs bg-gray-100 rounded">{{ coordinatorData.ques_count }} 个问题</span>
                </div>

                <div class="space-y-3">
                  <div v-for="question in questionsList" :key="question.number"
                    class="border-l-4 border-blue-500 pl-4 py-2 bg-blue-50 rounded-r">
                    <div class="text-sm font-medium text-blue-700 mb-1">
                      问题 {{ question.number }}
                    </div>
                    <div class="text-sm text-gray-800 leading-relaxed">
                      {{ question.content }}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div v-else class="flex items-center justify-center h-32 text-gray-500">
              暂无题目信息
            </div>
          </div>
        </ScrollArea>
      </div>
    </div>

    <!-- 下半部分：ModelerMessage 建模手册 -->
    <div class="h-1/2 bg-white rounded-lg border shadow-sm">
      <div class="border-b px-4 py-3">
        <h2 class="text-lg font-semibold text-gray-900">建模手册</h2>
      </div>
      <div class="h-full pb-14">
        <ScrollArea class="h-full">
          <div class="p-4">
            <div v-if="modelerData" class="space-y-4">
              <!-- EDA部分 -->
              <div v-if="modelerData.eda" class="space-y-2">
                <h3 class="text-base font-medium text-gray-700 flex items-center gap-2">
                  <span class="px-2 py-1 text-xs bg-gray-200 border rounded">EDA</span>
                  探索性数据分析
                </h3>
                <div class="text-sm text-gray-800 leading-relaxed whitespace-pre-wrap bg-gray-50 p-3 rounded">
                  {{ modelerData.eda }}
                </div>
              </div>

              <!-- 问题解决方案 -->
              <div v-for="question in questionsList" :key="`solution-${question.number}`" class="space-y-2">
                <div v-if="modelerData[`ques${question.number}`]">
                  <h3 class="text-base font-medium text-gray-700 flex items-center gap-2">
                    <span class="px-2 py-1 text-xs bg-gray-200 border rounded">问题{{ question.number }}</span>
                    解决方案
                  </h3>
                  <div
                    class="text-sm text-gray-800 leading-relaxed whitespace-pre-wrap bg-green-50 p-3 rounded border-l-4 border-green-500">
                    {{ modelerData[`ques${question.number}`] }}
                  </div>
                </div>
              </div>

              <!-- 敏感性分析 -->
              <div v-if="modelerData.sensitivity_analysis" class="space-y-2">
                <h3 class="text-base font-medium text-gray-700 flex items-center gap-2">
                  <span class="px-2 py-1 text-xs bg-gray-200 border rounded">敏感性分析</span>
                </h3>
                <div
                  class="text-sm text-gray-800 leading-relaxed whitespace-pre-wrap bg-orange-50 p-3 rounded border-l-4 border-orange-500">
                  {{ modelerData.sensitivity_analysis }}
                </div>
              </div>
            </div>

            <div v-else class="flex items-center justify-center h-32 text-gray-500">
              暂无建模手册信息
            </div>
          </div>
        </ScrollArea>
      </div>
    </div>
  </div>
</template>

<style scoped></style>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\AgentEditor\WriterEditor.vue 的内容:
================================================================================
<script setup lang="ts">
import { onMounted, ref, watch, computed } from 'vue';
import { renderMarkdown } from '@/utils/markdown';
import type { WriterMessage } from '@/utils/response'
import { ScrollArea } from '@/components/ui/scroll-area'

interface ContentSection {
  id: number;
  content: string;
  renderedContent: string;
  sub_title?: string;
}

const props = defineProps<{
  messages: WriterMessage[]
  writerSequence: string[]
}>()

const sections = ref<ContentSection[]>([]);
let nextId = 0;

// 添加新的内容段落
const appendContent = async (content: string, sub_title?: string) => {
  const renderedContent = await renderMarkdown(content);
  sections.value.push({
    id: nextId++,
    content,
    renderedContent,
    sub_title
  });
};

// 根据 writerSequence 排序内容
const sortedSections = computed(() => {
  if (!props.writerSequence.length) return sections.value;

  return [...sections.value].sort((a, b) => {
    const aIndex = a.sub_title ? props.writerSequence.indexOf(a.sub_title) : Infinity;
    const bIndex = b.sub_title ? props.writerSequence.indexOf(b.sub_title) : Infinity;

    if (aIndex === Infinity && bIndex === Infinity) return 0;
    if (aIndex === Infinity) return 1;
    if (bIndex === Infinity) return -1;

    return aIndex - bIndex;
  });
});

// 监听消息变化
watch(() => props.messages, async (messages) => {
  // 清空现有内容
  sections.value = [];
  nextId = 0;

  // 按顺序添加每个消息的内容
  for (const msg of messages) {
    if (msg.content) {
      await appendContent(msg.content, msg.sub_title);
    }
  }
}, { immediate: true });
</script>

<template>
  <div class="h-full flex flex-col p-4">
    <div class="h-full bg-white rounded-lg border shadow-sm">
      <div class="border-b px-4 py-3">
        <h2 class="text-lg font-semibold text-gray-900">论文内容</h2>
      </div>
      <div class="h-full pb-14">
        <ScrollArea class="h-full overflow-y-auto">
          <div class="p-6">
            <div class="max-w-4xl mx-auto overflow-y-auto space-y-6">
              <TransitionGroup name="section" tag="div" class="space-y-6">
                <div v-for="section in sortedSections" :key="section.id"
                  class="bg-gray-50 rounded-lg shadow-sm transform transition-all duration-500">
                  <div class="p-6">
                    <div class="prose prose-slate max-w-none" v-html="section.renderedContent"></div>
                  </div>
                </div>
              </TransitionGroup>
            </div>
          </div>
        </ScrollArea>
      </div>
    </div>
  </div>
</template>

<style>
@import 'katex/dist/katex.min.css';

.section-enter-active,
.section-leave-active {
  transition: all 0.5s ease;
}

.section-enter-from {
  opacity: 0;
  transform: translateY(20px);
}

.section-leave-to {
  opacity: 0;
  transform: translateY(-20px);
}

.prose {
  @apply text-gray-800;
}

.prose h1 {
  @apply text-3xl font-bold mb-6 text-gray-900;
}

.prose h2 {
  @apply text-2xl font-semibold mt-4 mb-4 text-gray-800;
}

.prose h3 {
  @apply text-xl font-semibold mt-3 mb-3 text-gray-800;
}

.prose p {
  @apply mb-4 leading-relaxed;
}

.prose ul {
  @apply list-disc ml-6 mb-4 space-y-2;
}

.prose ol {
  @apply list-decimal ml-6 mb-4 space-y-2;
}

.prose blockquote {
  @apply border-l-4 border-gray-300 pl-4 italic my-4 text-gray-600;
}

.prose a {
  @apply text-blue-600 hover:text-blue-800 underline;
}

.prose hr {
  @apply my-8 border-gray-200;
}

.prose table {
  @apply w-full border-collapse my-6 !border-2 !border-gray-400;
}

.prose th {
  @apply !bg-gray-200 p-3 text-left !font-bold !text-gray-900 !border !border-gray-400;
}

.prose td {
  @apply p-3 !text-gray-900 !border !border-gray-400;
}

.prose tr {
  @apply !border !border-gray-400;
}

.prose tr:nth-child(even) {
  @apply !bg-gray-50;
}

.prose tr:hover {
  @apply !bg-gray-100;
}

.prose code {
  @apply bg-gray-100 px-1 py-0.5 rounded text-sm font-mono;
}

.prose pre {
  @apply bg-gray-100 p-4 rounded-lg overflow-x-auto my-4;
}

.prose pre code {
  @apply bg-transparent p-0;
}

.prose .math-block {
  @apply my-4 overflow-x-auto;
  text-align: center;
}

.prose .katex-display {
  @apply my-4 overflow-x-auto;
}

.prose .katex {
  font-size: 1.1em;
}
</style>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\alert\Alert.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { type AlertVariants, alertVariants } from '.'

const props = defineProps<{
  class?: HTMLAttributes['class']
  variant?: AlertVariants['variant']
}>()
</script>

<template>
  <div :class="cn(alertVariants({ variant }), props.class)" role="alert">
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\alert\AlertDescription.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('text-sm [&_p]:leading-relaxed', props.class)">
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\alert\AlertTitle.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <h5 :class="cn('mb-1 font-medium leading-none tracking-tight', props.class)">
    <slot />
  </h5>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\avatar\Avatar.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { AvatarRoot } from 'reka-ui'
import { avatarVariant, type AvatarVariants } from '.'

const props = withDefaults(defineProps<{
  class?: HTMLAttributes['class']
  size?: AvatarVariants['size']
  shape?: AvatarVariants['shape']
}>(), {
  size: 'sm',
  shape: 'circle',
})
</script>

<template>
  <AvatarRoot :class="cn(avatarVariant({ size, shape }), props.class)">
    <slot />
  </AvatarRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\avatar\AvatarFallback.vue 的内容:
================================================================================
<script setup lang="ts">
import { AvatarFallback, type AvatarFallbackProps } from 'reka-ui'

const props = defineProps<AvatarFallbackProps>()
</script>

<template>
  <AvatarFallback v-bind="props">
    <slot />
  </AvatarFallback>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\avatar\AvatarImage.vue 的内容:
================================================================================
<script setup lang="ts">
import type { AvatarImageProps } from 'reka-ui'
import { AvatarImage } from 'reka-ui'

const props = defineProps<AvatarImageProps>()
</script>

<template>
  <AvatarImage v-bind="props" class="h-full w-full object-cover">
    <slot />
  </AvatarImage>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\breadcrumb\Breadcrumb.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { HTMLAttributes } from 'vue'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <nav aria-label="breadcrumb" :class="props.class">
    <slot />
  </nav>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\breadcrumb\BreadcrumbEllipsis.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { MoreHorizontal } from 'lucide-vue-next'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <span
    role="presentation"
    aria-hidden="true"
    :class="cn('flex h-9 w-9 items-center justify-center', props.class)"
  >
    <slot>
      <MoreHorizontal class="h-4 w-4" />
    </slot>
    <span class="sr-only">More</span>
  </span>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\breadcrumb\BreadcrumbItem.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <li
    :class="cn('inline-flex items-center gap-1.5', props.class)"
  >
    <slot />
  </li>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\breadcrumb\BreadcrumbLink.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Primitive, type PrimitiveProps } from 'reka-ui'

const props = withDefaults(defineProps<PrimitiveProps & { class?: HTMLAttributes['class'] }>(), {
  as: 'a',
})
</script>

<template>
  <Primitive
    :as="as"
    :as-child="asChild"
    :class="cn('transition-colors hover:text-foreground', props.class)"
  >
    <slot />
  </Primitive>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\breadcrumb\BreadcrumbList.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <ol
    :class="cn('flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5', props.class)"
  >
    <slot />
  </ol>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\breadcrumb\BreadcrumbPage.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <span
    role="link"
    aria-disabled="true"
    aria-current="page"
    :class="cn('font-normal text-foreground', props.class)"
  >
    <slot />
  </span>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\breadcrumb\BreadcrumbSeparator.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { ChevronRight } from 'lucide-vue-next'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <li
    role="presentation"
    aria-hidden="true"
    :class="cn('[&>svg]:size-3.5', props.class)"
  >
    <slot>
      <ChevronRight />
    </slot>
  </li>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\button\Button.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Primitive, type PrimitiveProps } from 'reka-ui'
import { type ButtonVariants, buttonVariants } from '.'

interface Props extends PrimitiveProps {
  variant?: ButtonVariants['variant']
  size?: ButtonVariants['size']
  class?: HTMLAttributes['class']
}

const props = withDefaults(defineProps<Props>(), {
  as: 'button',
})
</script>

<template>
  <Primitive
    :as="as"
    :as-child="asChild"
    :class="cn(buttonVariants({ variant, size }), props.class)"
  >
    <slot />
  </Primitive>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\card\Card.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div
    :class="
      cn(
        'rounded-xl border bg-card text-card-foreground shadow',
        props.class,
      )
    "
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\card\CardContent.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('p-6 pt-0', props.class)">
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\card\CardDescription.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <p :class="cn('text-sm text-muted-foreground', props.class)">
    <slot />
  </p>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\card\CardFooter.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('flex items-center p-6 pt-0', props.class)">
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\card\CardHeader.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('flex flex-col gap-y-1.5 p-6', props.class)">
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\card\CardTitle.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <h3
    :class="
      cn('font-semibold leading-none tracking-tight', props.class)
    "
  >
    <slot />
  </h3>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\collapsible\Collapsible.vue 的内容:
================================================================================
<script setup lang="ts">
import type { CollapsibleRootEmits, CollapsibleRootProps } from 'reka-ui'
import { CollapsibleRoot, useForwardPropsEmits } from 'reka-ui'

const props = defineProps<CollapsibleRootProps>()
const emits = defineEmits<CollapsibleRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <CollapsibleRoot v-slot="{ open }" v-bind="forwarded">
    <slot :open="open" />
  </CollapsibleRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\collapsible\CollapsibleContent.vue 的内容:
================================================================================
<script setup lang="ts">
import { CollapsibleContent, type CollapsibleContentProps } from 'reka-ui'

const props = defineProps<CollapsibleContentProps>()
</script>

<template>
  <CollapsibleContent v-bind="props" class="overflow-hidden transition-all data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down">
    <slot />
  </CollapsibleContent>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\collapsible\CollapsibleTrigger.vue 的内容:
================================================================================
<script setup lang="ts">
import { CollapsibleTrigger, type CollapsibleTriggerProps } from 'reka-ui'

const props = defineProps<CollapsibleTriggerProps>()
</script>

<template>
  <CollapsibleTrigger v-bind="props">
    <slot />
  </CollapsibleTrigger>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dialog\Dialog.vue 的内容:
================================================================================
<script setup lang="ts">
import type { DialogRootEmits, DialogRootProps } from "reka-ui"
import { DialogRoot, useForwardPropsEmits } from "reka-ui"

const props = defineProps<DialogRootProps>()
const emits = defineEmits<DialogRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <DialogRoot v-bind="forwarded">
    <slot />
  </DialogRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dialog\DialogClose.vue 的内容:
================================================================================
<script setup lang="ts">
import type { DialogCloseProps } from "reka-ui"
import { DialogClose } from "reka-ui"

const props = defineProps<DialogCloseProps>()
</script>

<template>
  <DialogClose v-bind="props">
    <slot />
  </DialogClose>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dialog\DialogContent.vue 的内容:
================================================================================
<script setup lang="ts">
import type { DialogContentEmits, DialogContentProps } from "reka-ui"
import type { HTMLAttributes } from "vue"
import { reactiveOmit } from "@vueuse/core"
import { X } from "lucide-vue-next"
import {
  DialogClose,
  DialogContent,

  DialogOverlay,
  DialogPortal,
  useForwardPropsEmits,
} from "reka-ui"
import { cn } from "@/lib/utils"

const props = defineProps<DialogContentProps & { class?: HTMLAttributes["class"] }>()
const emits = defineEmits<DialogContentEmits>()

const delegatedProps = reactiveOmit(props, "class")

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DialogPortal>
    <DialogOverlay
      class="fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
    />
    <DialogContent
      v-bind="forwarded"
      :class="
        cn(
          'fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
          props.class,
        )"
    >
      <slot />

      <DialogClose
        class="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
      >
        <X class="w-4 h-4" />
        <span class="sr-only">Close</span>
      </DialogClose>
    </DialogContent>
  </DialogPortal>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dialog\DialogDescription.vue 的内容:
================================================================================
<script setup lang="ts">
import type { DialogDescriptionProps } from "reka-ui"
import type { HTMLAttributes } from "vue"
import { reactiveOmit } from "@vueuse/core"
import { DialogDescription, useForwardProps } from "reka-ui"
import { cn } from "@/lib/utils"

const props = defineProps<DialogDescriptionProps & { class?: HTMLAttributes["class"] }>()

const delegatedProps = reactiveOmit(props, "class")

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <DialogDescription
    v-bind="forwardedProps"
    :class="cn('text-sm text-muted-foreground', props.class)"
  >
    <slot />
  </DialogDescription>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dialog\DialogFooter.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from "vue"
import { cn } from "@/lib/utils"

const props = defineProps<{ class?: HTMLAttributes["class"] }>()
</script>

<template>
  <div
    :class="
      cn(
        'flex flex-col-reverse sm:flex-row sm:justify-end sm:gap-x-2',
        props.class,
      )
    "
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dialog\DialogHeader.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from "vue"
import { cn } from "@/lib/utils"

const props = defineProps<{
  class?: HTMLAttributes["class"]
}>()
</script>

<template>
  <div
    :class="cn('flex flex-col gap-y-1.5 text-center sm:text-left', props.class)"
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dialog\DialogScrollContent.vue 的内容:
================================================================================
<script setup lang="ts">
import type { DialogContentEmits, DialogContentProps } from "reka-ui"
import type { HTMLAttributes } from "vue"
import { reactiveOmit } from "@vueuse/core"
import { X } from "lucide-vue-next"
import {
  DialogClose,
  DialogContent,

  DialogOverlay,
  DialogPortal,
  useForwardPropsEmits,
} from "reka-ui"
import { cn } from "@/lib/utils"

const props = defineProps<DialogContentProps & { class?: HTMLAttributes["class"] }>()
const emits = defineEmits<DialogContentEmits>()

const delegatedProps = reactiveOmit(props, "class")

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DialogPortal>
    <DialogOverlay
      class="fixed inset-0 z-50 grid place-items-center overflow-y-auto bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
    >
      <DialogContent
        :class="
          cn(
            'relative z-50 grid w-full max-w-lg my-8 gap-4 border border-border bg-background p-6 shadow-lg duration-200 sm:rounded-lg md:w-full',
            props.class,
          )
        "
        v-bind="forwarded"
        @pointer-down-outside="(event) => {
          const originalEvent = event.detail.originalEvent;
          const target = originalEvent.target as HTMLElement;
          if (originalEvent.offsetX > target.clientWidth || originalEvent.offsetY > target.clientHeight) {
            event.preventDefault();
          }
        }"
      >
        <slot />

        <DialogClose
          class="absolute top-4 right-4 p-0.5 transition-colors rounded-md hover:bg-secondary"
        >
          <X class="w-4 h-4" />
          <span class="sr-only">Close</span>
        </DialogClose>
      </DialogContent>
    </DialogOverlay>
  </DialogPortal>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dialog\DialogTitle.vue 的内容:
================================================================================
<script setup lang="ts">
import type { DialogTitleProps } from "reka-ui"
import type { HTMLAttributes } from "vue"
import { reactiveOmit } from "@vueuse/core"
import { DialogTitle, useForwardProps } from "reka-ui"
import { cn } from "@/lib/utils"

const props = defineProps<DialogTitleProps & { class?: HTMLAttributes["class"] }>()

const delegatedProps = reactiveOmit(props, "class")

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <DialogTitle
    v-bind="forwardedProps"
    :class="
      cn(
        'text-lg font-semibold leading-none tracking-tight',
        props.class,
      )
    "
  >
    <slot />
  </DialogTitle>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dialog\DialogTrigger.vue 的内容:
================================================================================
<script setup lang="ts">
import type { DialogTriggerProps } from "reka-ui"
import { DialogTrigger } from "reka-ui"

const props = defineProps<DialogTriggerProps>()
</script>

<template>
  <DialogTrigger v-bind="props">
    <slot />
  </DialogTrigger>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenu.vue 的内容:
================================================================================
<script setup lang="ts">
import { DropdownMenuRoot, type DropdownMenuRootEmits, type DropdownMenuRootProps, useForwardPropsEmits } from 'reka-ui'

const props = defineProps<DropdownMenuRootProps>()
const emits = defineEmits<DropdownMenuRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <DropdownMenuRoot v-bind="forwarded">
    <slot />
  </DropdownMenuRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuCheckboxItem.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { Check } from 'lucide-vue-next'
import {
  DropdownMenuCheckboxItem,
  type DropdownMenuCheckboxItemEmits,
  type DropdownMenuCheckboxItemProps,
  DropdownMenuItemIndicator,
  useForwardPropsEmits,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<DropdownMenuCheckboxItemProps & { class?: HTMLAttributes['class'] }>()
const emits = defineEmits<DropdownMenuCheckboxItemEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DropdownMenuCheckboxItem
    v-bind="forwarded"
    :class=" cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      props.class,
    )"
  >
    <span class="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuItemIndicator>
        <Check class="w-4 h-4" />
      </DropdownMenuItemIndicator>
    </span>
    <slot />
  </DropdownMenuCheckboxItem>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuContent.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import {
  DropdownMenuContent,
  type DropdownMenuContentEmits,
  type DropdownMenuContentProps,
  DropdownMenuPortal,
  useForwardPropsEmits,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = withDefaults(
  defineProps<DropdownMenuContentProps & { class?: HTMLAttributes['class'] }>(),
  {
    sideOffset: 4,
  },
)
const emits = defineEmits<DropdownMenuContentEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DropdownMenuPortal>
    <DropdownMenuContent
      v-bind="forwarded"
      :class="cn('z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2', props.class)"
    >
      <slot />
    </DropdownMenuContent>
  </DropdownMenuPortal>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuGroup.vue 的内容:
================================================================================
<script setup lang="ts">
import { DropdownMenuGroup, type DropdownMenuGroupProps } from 'reka-ui'

const props = defineProps<DropdownMenuGroupProps>()
</script>

<template>
  <DropdownMenuGroup v-bind="props">
    <slot />
  </DropdownMenuGroup>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuItem.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { DropdownMenuItem, type DropdownMenuItemProps, useForwardProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<DropdownMenuItemProps & { class?: HTMLAttributes['class'], inset?: boolean }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <DropdownMenuItem
    v-bind="forwardedProps"
    :class="cn(
      'relative flex cursor-default select-none items-center rounded-sm gap-2 px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50  [&>svg]:size-4 [&>svg]:shrink-0',
      inset && 'pl-8',
      props.class,
    )"
  >
    <slot />
  </DropdownMenuItem>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuLabel.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { DropdownMenuLabel, type DropdownMenuLabelProps, useForwardProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<DropdownMenuLabelProps & { class?: HTMLAttributes['class'], inset?: boolean }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <DropdownMenuLabel
    v-bind="forwardedProps"
    :class="cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', props.class)"
  >
    <slot />
  </DropdownMenuLabel>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuRadioGroup.vue 的内容:
================================================================================
<script setup lang="ts">
import {
  DropdownMenuRadioGroup,
  type DropdownMenuRadioGroupEmits,
  type DropdownMenuRadioGroupProps,
  useForwardPropsEmits,
} from 'reka-ui'

const props = defineProps<DropdownMenuRadioGroupProps>()
const emits = defineEmits<DropdownMenuRadioGroupEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <DropdownMenuRadioGroup v-bind="forwarded">
    <slot />
  </DropdownMenuRadioGroup>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuRadioItem.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { Circle } from 'lucide-vue-next'
import {
  DropdownMenuItemIndicator,
  DropdownMenuRadioItem,
  type DropdownMenuRadioItemEmits,
  type DropdownMenuRadioItemProps,
  useForwardPropsEmits,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<DropdownMenuRadioItemProps & { class?: HTMLAttributes['class'] }>()

const emits = defineEmits<DropdownMenuRadioItemEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DropdownMenuRadioItem
    v-bind="forwarded"
    :class="cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      props.class,
    )"
  >
    <span class="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuItemIndicator>
        <Circle class="h-4 w-4 fill-current" />
      </DropdownMenuItemIndicator>
    </span>
    <slot />
  </DropdownMenuRadioItem>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuSeparator.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import {
  DropdownMenuSeparator,
  type DropdownMenuSeparatorProps,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<DropdownMenuSeparatorProps & {
  class?: HTMLAttributes['class']
}>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <DropdownMenuSeparator v-bind="delegatedProps" :class="cn('-mx-1 my-1 h-px bg-muted', props.class)" />
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuShortcut.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <span :class="cn('ml-auto text-xs tracking-widest opacity-60', props.class)">
    <slot />
  </span>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuSub.vue 的内容:
================================================================================
<script setup lang="ts">
import {
  DropdownMenuSub,
  type DropdownMenuSubEmits,
  type DropdownMenuSubProps,
  useForwardPropsEmits,
} from 'reka-ui'

const props = defineProps<DropdownMenuSubProps>()
const emits = defineEmits<DropdownMenuSubEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <DropdownMenuSub v-bind="forwarded">
    <slot />
  </DropdownMenuSub>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuSubContent.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import {
  DropdownMenuSubContent,
  type DropdownMenuSubContentEmits,
  type DropdownMenuSubContentProps,
  useForwardPropsEmits,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<DropdownMenuSubContentProps & { class?: HTMLAttributes['class'] }>()
const emits = defineEmits<DropdownMenuSubContentEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DropdownMenuSubContent
    v-bind="forwarded"
    :class="cn('z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2', props.class)"
  >
    <slot />
  </DropdownMenuSubContent>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuSubTrigger.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ChevronRight } from 'lucide-vue-next'
import {
  DropdownMenuSubTrigger,
  type DropdownMenuSubTriggerProps,
  useForwardProps,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<DropdownMenuSubTriggerProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <DropdownMenuSubTrigger
    v-bind="forwardedProps"
    :class="cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
      props.class,
    )"
  >
    <slot />
    <ChevronRight class="ml-auto h-4 w-4" />
  </DropdownMenuSubTrigger>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\dropdown-menu\DropdownMenuTrigger.vue 的内容:
================================================================================
<script setup lang="ts">
import { DropdownMenuTrigger, type DropdownMenuTriggerProps, useForwardProps } from 'reka-ui'

const props = defineProps<DropdownMenuTriggerProps>()

const forwardedProps = useForwardProps(props)
</script>

<template>
  <DropdownMenuTrigger class="outline-none" v-bind="forwardedProps">
    <slot />
  </DropdownMenuTrigger>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\input\Input.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { useVModel } from '@vueuse/core'

const props = defineProps<{
  defaultValue?: string | number
  modelValue?: string | number
  class?: HTMLAttributes['class']
}>()

const emits = defineEmits<{
  (e: 'update:modelValue', payload: string | number): void
}>()

const modelValue = useVModel(props, 'modelValue', emits, {
  passive: true,
  defaultValue: props.defaultValue,
})
</script>

<template>
  <input v-model="modelValue" :class="cn('flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50', props.class)">
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\label\Label.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { Label, type LabelProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<LabelProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <Label
    v-bind="delegatedProps"
    :class="
      cn(
        'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
        props.class,
      )
    "
  >
    <slot />
  </Label>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\resizable\ResizableHandle.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { GripVertical } from 'lucide-vue-next'
import { SplitterResizeHandle, type SplitterResizeHandleEmits, type SplitterResizeHandleProps, useForwardPropsEmits } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<SplitterResizeHandleProps & { class?: HTMLAttributes['class'], withHandle?: boolean }>()
const emits = defineEmits<SplitterResizeHandleEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props
  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <SplitterResizeHandle v-bind="forwarded" :class="cn('relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 [&[data-orientation=vertical]]:h-px [&[data-orientation=vertical]]:w-full [&[data-orientation=vertical]]:after:left-0 [&[data-orientation=vertical]]:after:h-1 [&[data-orientation=vertical]]:after:w-full [&[data-orientation=vertical]]:after:-translate-y-1/2 [&[data-orientation=vertical]]:after:translate-x-0 [&[data-orientation=vertical]>div]:rotate-90', props.class)">
    <template v-if="props.withHandle">
      <div class="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical class="h-2.5 w-2.5" />
      </div>
    </template>
  </SplitterResizeHandle>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\resizable\ResizablePanelGroup.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { SplitterGroup, type SplitterGroupEmits, type SplitterGroupProps, useForwardPropsEmits } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<SplitterGroupProps & { class?: HTMLAttributes['class'] }>()
const emits = defineEmits<SplitterGroupEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props
  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <SplitterGroup v-bind="forwarded" :class="cn('flex h-full w-full data-[panel-group-direction=vertical]:flex-col', props.class)">
    <slot />
  </SplitterGroup>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\scroll-area\ScrollArea.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import {
  ScrollAreaCorner,
  ScrollAreaRoot,
  type ScrollAreaRootProps,
  ScrollAreaViewport,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'
import ScrollBar from './ScrollBar.vue'

const props = defineProps<ScrollAreaRootProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ScrollAreaRoot v-bind="delegatedProps" :class="cn('relative overflow-hidden', props.class)">
    <ScrollAreaViewport class="h-full w-full rounded-[inherit]">
      <slot />
    </ScrollAreaViewport>
    <ScrollBar />
    <ScrollAreaCorner />
  </ScrollAreaRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\scroll-area\ScrollBar.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ScrollAreaScrollbar, type ScrollAreaScrollbarProps, ScrollAreaThumb } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = withDefaults(defineProps<ScrollAreaScrollbarProps & { class?: HTMLAttributes['class'] }>(), {
  orientation: 'vertical',
})

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ScrollAreaScrollbar
    v-bind="delegatedProps"
    :class="
      cn('flex touch-none select-none transition-colors',
         orientation === 'vertical'
           && 'h-full w-2.5 border-l border-l-transparent p-px',
         orientation === 'horizontal'
           && 'h-2.5 flex-col border-t border-t-transparent p-px',
         props.class)"
  >
    <ScrollAreaThumb class="relative flex-1 rounded-full bg-border" />
  </ScrollAreaScrollbar>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\Select.vue 的内容:
================================================================================
<script setup lang="ts">
import type { SelectRootEmits, SelectRootProps } from 'reka-ui'
import { SelectRoot, useForwardPropsEmits } from 'reka-ui'

const props = defineProps<SelectRootProps>()
const emits = defineEmits<SelectRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <SelectRoot v-bind="forwarded">
    <slot />
  </SelectRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectContent.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import {
  SelectContent,
  type SelectContentEmits,
  type SelectContentProps,
  SelectPortal,
  SelectViewport,
  useForwardPropsEmits,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'
import { SelectScrollDownButton, SelectScrollUpButton } from '.'

defineOptions({
  inheritAttrs: false,
})

const props = withDefaults(
  defineProps<SelectContentProps & { class?: HTMLAttributes['class'] }>(),
  {
    position: 'popper',
  },
)
const emits = defineEmits<SelectContentEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <SelectPortal>
    <SelectContent
      v-bind="{ ...forwarded, ...$attrs }" :class="cn(
        'relative z-50 max-h-96 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper'
          && 'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        props.class,
      )
      "
    >
      <SelectScrollUpButton />
      <SelectViewport :class="cn('p-1', position === 'popper' && 'h-[--reka-select-trigger-height] w-full min-w-[--reka-select-trigger-width]')">
        <slot />
      </SelectViewport>
      <SelectScrollDownButton />
    </SelectContent>
  </SelectPortal>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectGroup.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { SelectGroup, type SelectGroupProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<SelectGroupProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <SelectGroup :class="cn('p-1 w-full', props.class)" v-bind="delegatedProps">
    <slot />
  </SelectGroup>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectItem.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { Check } from 'lucide-vue-next'
import {
  SelectItem,
  SelectItemIndicator,
  type SelectItemProps,
  SelectItemText,
  useForwardProps,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<SelectItemProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <SelectItem
    v-bind="forwardedProps"
    :class="
      cn(
        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        props.class,
      )
    "
  >
    <span class="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectItemIndicator>
        <Check class="h-4 w-4" />
      </SelectItemIndicator>
    </span>

    <SelectItemText>
      <slot />
    </SelectItemText>
  </SelectItem>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectItemText.vue 的内容:
================================================================================
<script setup lang="ts">
import { SelectItemText, type SelectItemTextProps } from 'reka-ui'

const props = defineProps<SelectItemTextProps>()
</script>

<template>
  <SelectItemText v-bind="props">
    <slot />
  </SelectItemText>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectLabel.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { SelectLabel, type SelectLabelProps } from 'reka-ui'

const props = defineProps<SelectLabelProps & { class?: HTMLAttributes['class'] }>()
</script>

<template>
  <SelectLabel :class="cn('px-2 py-1.5 text-sm font-semibold', props.class)">
    <slot />
  </SelectLabel>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectScrollDownButton.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ChevronDown } from 'lucide-vue-next'
import { SelectScrollDownButton, type SelectScrollDownButtonProps, useForwardProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<SelectScrollDownButtonProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <SelectScrollDownButton v-bind="forwardedProps" :class="cn('flex cursor-default items-center justify-center py-1', props.class)">
    <slot>
      <ChevronDown />
    </slot>
  </SelectScrollDownButton>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectScrollUpButton.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ChevronUp } from 'lucide-vue-next'
import { SelectScrollUpButton, type SelectScrollUpButtonProps, useForwardProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<SelectScrollUpButtonProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <SelectScrollUpButton v-bind="forwardedProps" :class="cn('flex cursor-default items-center justify-center py-1', props.class)">
    <slot>
      <ChevronUp />
    </slot>
  </SelectScrollUpButton>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectSeparator.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { SelectSeparator, type SelectSeparatorProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<SelectSeparatorProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <SelectSeparator v-bind="delegatedProps" :class="cn('-mx-1 my-1 h-px bg-muted', props.class)" />
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectTrigger.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ChevronDown } from 'lucide-vue-next'
import { SelectIcon, SelectTrigger, type SelectTriggerProps, useForwardProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<SelectTriggerProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <SelectTrigger
    v-bind="forwardedProps"
    :class="cn(
      'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:truncate text-start',
      props.class,
    )"
  >
    <slot />
    <SelectIcon as-child>
      <ChevronDown class="w-4 h-4 opacity-50 shrink-0" />
    </SelectIcon>
  </SelectTrigger>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\select\SelectValue.vue 的内容:
================================================================================
<script setup lang="ts">
import { SelectValue, type SelectValueProps } from 'reka-ui'

const props = defineProps<SelectValueProps>()
</script>

<template>
  <SelectValue v-bind="props">
    <slot />
  </SelectValue>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\separator\Separator.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { Separator, type SeparatorProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<
  SeparatorProps & { class?: HTMLAttributes['class'], label?: string }
>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <Separator
    v-bind="delegatedProps"
    :class="
      cn(
        'shrink-0 bg-border relative',
        props.orientation === 'vertical' ? 'w-px h-full' : 'h-px w-full',
        props.class,
      )
    "
  >
    <span
      v-if="props.label"
      :class="
        cn(
          'text-xs text-muted-foreground bg-background absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex justify-center items-center',
          props.orientation === 'vertical' ? 'w-[1px] px-1 py-2' : 'h-[1px] py-1 px-2',
        )
      "
    >{{ props.label }}</span>
  </Separator>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sheet\Sheet.vue 的内容:
================================================================================
<script setup lang="ts">
import { DialogRoot, type DialogRootEmits, type DialogRootProps, useForwardPropsEmits } from 'reka-ui'

const props = defineProps<DialogRootProps>()
const emits = defineEmits<DialogRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <DialogRoot v-bind="forwarded">
    <slot />
  </DialogRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sheet\SheetClose.vue 的内容:
================================================================================
<script setup lang="ts">
import { DialogClose, type DialogCloseProps } from 'reka-ui'

const props = defineProps<DialogCloseProps>()
</script>

<template>
  <DialogClose v-bind="props">
    <slot />
  </DialogClose>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sheet\SheetContent.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { X } from 'lucide-vue-next'
import {
  DialogClose,
  DialogContent,
  type DialogContentEmits,
  type DialogContentProps,
  DialogOverlay,
  DialogPortal,
  useForwardPropsEmits,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'
import { type SheetVariants, sheetVariants } from '.'

interface SheetContentProps extends DialogContentProps {
  class?: HTMLAttributes['class']
  side?: SheetVariants['side']
}

defineOptions({
  inheritAttrs: false,
})

const props = defineProps<SheetContentProps>()

const emits = defineEmits<DialogContentEmits>()

const delegatedProps = computed(() => {
  const { class: _, side, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <DialogPortal>
    <DialogOverlay
      class="fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
    />
    <DialogContent
      :class="cn(sheetVariants({ side }), props.class)"
      v-bind="{ ...forwarded, ...$attrs }"
    >
      <slot />

      <DialogClose
        class="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary"
      >
        <X class="w-4 h-4" />
      </DialogClose>
    </DialogContent>
  </DialogPortal>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sheet\SheetDescription.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { DialogDescription, type DialogDescriptionProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<DialogDescriptionProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <DialogDescription
    :class="cn('text-sm text-muted-foreground', props.class)"
    v-bind="delegatedProps"
  >
    <slot />
  </DialogDescription>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sheet\SheetFooter.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{ class?: HTMLAttributes['class'] }>()
</script>

<template>
  <div
    :class="
      cn(
        'flex flex-col-reverse sm:flex-row sm:justify-end sm:gap-x-2',
        props.class,
      )
    "
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sheet\SheetHeader.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{ class?: HTMLAttributes['class'] }>()
</script>

<template>
  <div
    :class="
      cn('flex flex-col gap-y-2 text-center sm:text-left', props.class)
    "
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sheet\SheetTitle.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { DialogTitle, type DialogTitleProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<DialogTitleProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <DialogTitle
    :class="cn('text-lg font-semibold text-foreground', props.class)"
    v-bind="delegatedProps"
  >
    <slot />
  </DialogTitle>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sheet\SheetTrigger.vue 的内容:
================================================================================
<script setup lang="ts">
import { DialogTrigger, type DialogTriggerProps } from 'reka-ui'

const props = defineProps<DialogTriggerProps>()
</script>

<template>
  <DialogTrigger v-bind="props">
    <slot />
  </DialogTrigger>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\Sidebar.vue 的内容:
================================================================================
<script setup lang="ts">
import type { SidebarProps } from '.'
import { cn } from '@/lib/utils'
import { Sheet, SheetContent, SheetTitle, SheetDescription } from '@/components/ui/sheet'
import { SIDEBAR_WIDTH_MOBILE, useSidebar } from './utils'

defineOptions({
  inheritAttrs: false,
})

const props = withDefaults(defineProps<SidebarProps>(), {
  side: 'left',
  variant: 'sidebar',
  collapsible: 'offcanvas',
})

const { isMobile, state, openMobile, setOpenMobile } = useSidebar()
</script>

<template>
  <div v-if="collapsible === 'none'"
    :class="cn('flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground', props.class)"
    v-bind="$attrs">
    <slot />
  </div>

  <Sheet v-else-if="isMobile" :open="openMobile" v-bind="$attrs" @update:open="setOpenMobile">
    <SheetContent data-sidebar="sidebar" data-mobile="true" :side="side"
      class="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden" :style="{
        '--sidebar-width': SIDEBAR_WIDTH_MOBILE,
      }">
      <SheetTitle class="sr-only">侧边栏导航</SheetTitle>
      <SheetDescription class="sr-only">包含应用程序的主要导航菜单</SheetDescription>
      <div class="flex h-full w-full flex-col">
        <slot />
      </div>
    </SheetContent>
  </Sheet>

  <div v-else class="group peer hidden md:block" :data-state="state"
    :data-collapsible="state === 'collapsed' ? collapsible : ''" :data-variant="variant" :data-side="side">
    <!-- This is what handles the sidebar gap on desktop  -->
    <div :class="cn(
      'duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear',
      'group-data-[collapsible=offcanvas]:w-0',
      'group-data-[side=right]:rotate-180',
      variant === 'floating' || variant === 'inset'
        ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]'
        : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon]',
    )" />
    <div :class="cn(
      'duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex',
      side === 'left'
        ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
        : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
      // Adjust the padding for floating and inset variants.
      variant === 'floating' || variant === 'inset'
        ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]'
        : 'group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l',
      props.class,
    )" v-bind="$attrs">
      <div data-sidebar="sidebar"
        class="flex h-full w-full flex-col text-sidebar-foreground bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow">
        <slot />
      </div>
    </div>
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarContent.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div
    data-sidebar="content"
    :class="cn('flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden', props.class)"
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarFooter.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div
    data-sidebar="footer"
    :class="cn('flex flex-col gap-2 p-2', props.class)"
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarGroup.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div
    data-sidebar="group"
    :class="cn('relative flex w-full min-w-0 flex-col p-2', props.class)"
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarGroupAction.vue 的内容:
================================================================================
<script setup lang="ts">
import type { PrimitiveProps } from 'reka-ui'
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Primitive } from 'reka-ui'

const props = defineProps<PrimitiveProps & {
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <Primitive
    data-sidebar="group-action"
    :as="as"
    :as-child="asChild"
    :class="cn(
      'absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
      'after:absolute after:-inset-2 after:md:hidden',
      'group-data-[collapsible=icon]:hidden',
      props.class,
    )"
  >
    <slot />
  </Primitive>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarGroupContent.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div
    data-sidebar="group-content"
    :class="cn('w-full text-sm', props.class)"
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarGroupLabel.vue 的内容:
================================================================================
<script setup lang="ts">
import type { PrimitiveProps } from 'reka-ui'
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Primitive } from 'reka-ui'

const props = defineProps<PrimitiveProps & {
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <Primitive
    data-sidebar="group-label"
    :as="as"
    :as-child="asChild"
    :class="cn(
      'duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
      'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
      props.class)"
  >
    <slot />
  </Primitive>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarHeader.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div
    data-sidebar="header"
    :class="cn('flex flex-col gap-2 p-2', props.class)"
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarInput.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Input } from '@/components/ui/input'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <Input
    data-sidebar="input"
    :class="cn(
      'h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring',
      props.class,
    )"
  >
    <slot />
  </Input>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarInset.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <main
    :class="cn(
      'relative flex min-h-svh flex-1 flex-col bg-background',
      'peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow',
      props.class,
    )"
  >
    <slot />
  </main>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenu.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <ul
    data-sidebar="menu"
    :class="cn('flex w-full min-w-0 flex-col gap-1', props.class)"
  >
    <slot />
  </ul>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenuAction.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Primitive, type PrimitiveProps } from 'reka-ui'

const props = withDefaults(defineProps<PrimitiveProps & {
  showOnHover?: boolean
  class?: HTMLAttributes['class']
}>(), {
  as: 'button',
})
</script>

<template>
  <Primitive
    data-sidebar="menu-action"
    :class="cn(
      'absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0',
      'after:absolute after:-inset-2 after:md:hidden',
      'peer-data-[size=sm]/menu-button:top-1',
      'peer-data-[size=default]/menu-button:top-1.5',
      'peer-data-[size=lg]/menu-button:top-2.5',
      'group-data-[collapsible=icon]:hidden',
      showOnHover
        && 'group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0',
      props.class,
    )"
    :as="as"
    :as-child="asChild"
  >
    <slot />
  </Primitive>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenuBadge.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div
    data-sidebar="menu-badge"
    :class="cn(
      'absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none',
      'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',
      'peer-data-[size=sm]/menu-button:top-1',
      'peer-data-[size=default]/menu-button:top-1.5',
      'peer-data-[size=lg]/menu-button:top-2.5',
      'group-data-[collapsible=icon]:hidden',
      props.class,
    )"
  >
    <slot />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenuButton.vue 的内容:
================================================================================
<script setup lang="ts">
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip'
import { type Component, computed } from 'vue'
import SidebarMenuButtonChild, { type SidebarMenuButtonProps } from './SidebarMenuButtonChild.vue'
import { useSidebar } from './utils'

defineOptions({
  inheritAttrs: false,
})

const props = withDefaults(defineProps<SidebarMenuButtonProps & {
  tooltip?: string | Component
}>(), {
  as: 'button',
  variant: 'default',
  size: 'default',
})

const { isMobile, state } = useSidebar()

const delegatedProps = computed(() => {
  const { tooltip, ...delegated } = props
  return delegated
})
</script>

<template>
  <SidebarMenuButtonChild v-if="!tooltip" v-bind="{ ...delegatedProps, ...$attrs }">
    <slot />
  </SidebarMenuButtonChild>

  <Tooltip v-else>
    <TooltipTrigger as-child>
      <SidebarMenuButtonChild v-bind="{ ...delegatedProps, ...$attrs }">
        <slot />
      </SidebarMenuButtonChild>
    </TooltipTrigger>
    <TooltipContent
      side="right"
      align="center"
      :hidden="state !== 'collapsed' || isMobile"
    >
      <template v-if="typeof tooltip === 'string'">
        {{ tooltip }}
      </template>
      <component :is="tooltip" v-else />
    </TooltipContent>
  </Tooltip>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenuButtonChild.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Primitive, type PrimitiveProps } from 'reka-ui'
import { type SidebarMenuButtonVariants, sidebarMenuButtonVariants } from '.'

export interface SidebarMenuButtonProps extends PrimitiveProps {
  variant?: SidebarMenuButtonVariants['variant']
  size?: SidebarMenuButtonVariants['size']
  isActive?: boolean
  class?: HTMLAttributes['class']
}

const props = withDefaults(defineProps<SidebarMenuButtonProps>(), {
  as: 'button',
  variant: 'default',
  size: 'default',
})
</script>

<template>
  <Primitive
    data-sidebar="menu-button"
    :data-size="size"
    :data-active="isActive"
    :class="cn(sidebarMenuButtonVariants({ variant, size }), props.class)"
    :as="as"
    :as-child="asChild"
    v-bind="$attrs"
  >
    <slot />
  </Primitive>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenuItem.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <li
    data-sidebar="menu-item"
    :class="cn('group/menu-item relative', props.class)"
  >
    <slot />
  </li>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenuSkeleton.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { Skeleton } from '@/components/ui/skeleton'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<{
  showIcon?: boolean
  class?: HTMLAttributes['class']
}>()

const width = computed(() => {
  return `${Math.floor(Math.random() * 40) + 50}%`;
})
</script>

<template>
  <div
    data-sidebar="menu-skeleton"
    :class="cn('rounded-md h-8 flex gap-2 px-2 items-center', props.class)"
  >
    <Skeleton
      v-if="showIcon"
      class="size-4 rounded-md"
      data-sidebar="menu-skeleton-icon"
    />

    <Skeleton
      class="h-4 flex-1 max-w-[--skeleton-width]"
      data-sidebar="menu-skeleton-text"
      :style="{ '--skeleton-width': width }"
    />
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenuSub.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <ul
    data-sidebar="menu-badge"
    :class="cn(
      'mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5',
      'group-data-[collapsible=icon]:hidden',
      props.class,
    )"
  >
    <slot />
  </ul>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenuSubButton.vue 的内容:
================================================================================
<script setup lang="ts">
import type { PrimitiveProps } from 'reka-ui'
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Primitive } from 'reka-ui'

const props = withDefaults(defineProps<PrimitiveProps & {
  size?: 'sm' | 'md'
  isActive?: boolean
  class?: HTMLAttributes['class']
}>(), {
  as: 'a',
  size: 'md',
})
</script>

<template>
  <Primitive
    data-sidebar="menu-sub-button"
    :as="as"
    :as-child="asChild"
    :data-size="size"
    :data-active="isActive"
    :class="cn(
      'flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground',
      'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
      size === 'sm' && 'text-xs',
      size === 'md' && 'text-sm',
      'group-data-[collapsible=icon]:hidden',
      props.class,
    )"
  >
    <slot />
  </Primitive>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarMenuSubItem.vue 的内容:
================================================================================
<script setup lang="ts">

</script>

<template>
  <li>
    <slot />
  </li>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarProvider.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { useEventListener, useMediaQuery, useVModel } from '@vueuse/core'
import { TooltipProvider } from 'reka-ui'
import { computed, type HTMLAttributes, type Ref, ref } from 'vue'
import { provideSidebarContext, SIDEBAR_COOKIE_MAX_AGE, SIDEBAR_COOKIE_NAME, SIDEBAR_KEYBOARD_SHORTCUT, SIDEBAR_WIDTH, SIDEBAR_WIDTH_ICON } from './utils'

const props = withDefaults(defineProps<{
  defaultOpen?: boolean
  open?: boolean
  class?: HTMLAttributes['class']
}>(), {
  defaultOpen: true,
  open: undefined,
})

const emits = defineEmits<{
  'update:open': [open: boolean]
}>()

const isMobile = useMediaQuery('(max-width: 768px)')
const openMobile = ref(false)

const open = useVModel(props, 'open', emits, {
  defaultValue: props.defaultOpen ?? false,
  passive: (props.open === undefined) as false,
}) as Ref<boolean>

function setOpen(value: boolean) {
  open.value = value // emits('update:open', value)

  // This sets the cookie to keep the sidebar state.
  document.cookie = `${SIDEBAR_COOKIE_NAME}=${open.value}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
}

function setOpenMobile(value: boolean) {
  openMobile.value = value
}

// Helper to toggle the sidebar.
function toggleSidebar() {
  return isMobile.value ? setOpenMobile(!openMobile.value) : setOpen(!open.value)
}

useEventListener('keydown', (event: KeyboardEvent) => {
  if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
    event.preventDefault()
    toggleSidebar()
  }
})

// We add a state so that we can do data-state="expanded" or "collapsed".
// This makes it easier to style the sidebar with Tailwind classes.
const state = computed(() => open.value ? 'expanded' : 'collapsed')

provideSidebarContext({
  state,
  open,
  setOpen,
  isMobile,
  openMobile,
  setOpenMobile,
  toggleSidebar,
})
</script>

<template>
  <TooltipProvider :delay-duration="0">
    <div
      :style="{
        '--sidebar-width': SIDEBAR_WIDTH,
        '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,
      }"
      :class="cn('group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar', props.class)"
      v-bind="$attrs"
    >
      <slot />
    </div>
  </TooltipProvider>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarRail.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { useSidebar } from './utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()

const { toggleSidebar } = useSidebar()
</script>

<template>
  <button
    data-sidebar="rail"
    aria-label="Toggle Sidebar"
    :tabindex="-1"
    title="Toggle Sidebar"
    :class="cn(
      'absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',
      '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',
      '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
      'group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar',
      '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
      '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
      props.class,
    )"
    @click="toggleSidebar"
  >
    <slot />
  </button>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarSeparator.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Separator } from '@/components/ui/separator'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <Separator
    data-sidebar="separator"
    :class="cn('mx-2 w-auto bg-sidebar-border', props.class)"
  >
    <slot />
  </Separator>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\sidebar\SidebarTrigger.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { PanelLeft } from 'lucide-vue-next'
import { useSidebar } from './utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()

const { toggleSidebar } = useSidebar()
</script>

<template>
  <Button
    data-sidebar="trigger"
    variant="ghost"
    size="icon"
    :class="cn('h-7 w-7', props.class)"
    @click="toggleSidebar"
  >
    <PanelLeft />
    <span class="sr-only">Toggle Sidebar</span>
  </Button>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\skeleton\Skeleton.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

interface SkeletonProps {
  class?: HTMLAttributes['class']
}

const props = defineProps<SkeletonProps>()
</script>

<template>
  <div :class="cn('animate-pulse rounded-md bg-primary/10', props.class)" />
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\stepper\Stepper.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { StepperRootEmits, StepperRootProps } from 'reka-ui'
import { cn } from '@/lib/utils'
import { StepperRoot, useForwardPropsEmits } from 'reka-ui'

import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<StepperRootProps & { class?: HTMLAttributes['class'] }>()
const emits = defineEmits<StepperRootEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <StepperRoot
    v-slot="slotProps"
    :class="cn(
      'flex gap-2',
      props.class,
    )"
    v-bind="forwarded"
  >
    <slot v-bind="slotProps" />
  </StepperRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\stepper\StepperDescription.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { StepperDescriptionProps } from 'reka-ui'
import { cn } from '@/lib/utils'
import { StepperDescription, useForwardProps } from 'reka-ui'

import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<StepperDescriptionProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardProps(delegatedProps)
</script>

<template>
  <StepperDescription v-slot="slotProps" v-bind="forwarded" :class="cn('text-xs text-muted-foreground', props.class)">
    <slot v-bind="slotProps" />
  </StepperDescription>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\stepper\StepperIndicator.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { StepperIndicatorProps } from 'reka-ui'
import { cn } from '@/lib/utils'
import { StepperIndicator, useForwardProps } from 'reka-ui'

import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<StepperIndicatorProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardProps(delegatedProps)
</script>

<template>
  <StepperIndicator
    v-bind="forwarded"
    :class="cn(
      'inline-flex items-center justify-center rounded-full text-muted-foreground/50 w-8 h-8',
      // Disabled
      'group-data-[disabled]:text-muted-foreground group-data-[disabled]:opacity-50',
      // Active
      'group-data-[state=active]:bg-primary group-data-[state=active]:text-primary-foreground',
      // Completed
      'group-data-[state=completed]:bg-accent group-data-[state=completed]:text-accent-foreground',
      props.class,
    )"
  >
    <slot />
  </StepperIndicator>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\stepper\StepperItem.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { StepperItemProps } from 'reka-ui'
import { cn } from '@/lib/utils'
import { StepperItem, useForwardProps } from 'reka-ui'

import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<StepperItemProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardProps(delegatedProps)
</script>

<template>
  <StepperItem
    v-slot="slotProps"
    v-bind="forwarded"
    :class="cn('flex items-center gap-2 group data-[disabled]:pointer-events-none', props.class)"
  >
    <slot v-bind="slotProps" />
  </StepperItem>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\stepper\StepperSeparator.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { StepperSeparatorProps } from 'reka-ui'
import { cn } from '@/lib/utils'
import { StepperSeparator, useForwardProps } from 'reka-ui'

import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<StepperSeparatorProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardProps(delegatedProps)
</script>

<template>
  <StepperSeparator
    v-bind="forwarded"
    :class="cn(
      'bg-muted',
      // Disabled
      'group-data-[disabled]:bg-muted group-data-[disabled]:opacity-50',
      // Completed
      'group-data-[state=completed]:bg-accent-foreground',
      props.class,
    )"
  />
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\stepper\StepperTitle.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { StepperTitleProps } from 'reka-ui'
import { cn } from '@/lib/utils'
import { StepperTitle, useForwardProps } from 'reka-ui'

import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<StepperTitleProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardProps(delegatedProps)
</script>

<template>
  <StepperTitle v-bind="forwarded" :class="cn('text-md font-semibold whitespace-nowrap', props.class)">
    <slot />
  </StepperTitle>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\stepper\StepperTrigger.vue 的内容:
================================================================================
<script lang="ts" setup>
import type { StepperTriggerProps } from 'reka-ui'
import { cn } from '@/lib/utils'
import { StepperTrigger, useForwardProps } from 'reka-ui'

import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<StepperTriggerProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardProps(delegatedProps)
</script>

<template>
  <StepperTrigger
    v-bind="forwarded"
    :class="cn('p-1 flex flex-col items-center text-center gap-1 rounded-md', props.class)"
  >
    <slot />
  </StepperTrigger>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\switch\Switch.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import {
  SwitchRoot,
  type SwitchRootEmits,
  type SwitchRootProps,
  SwitchThumb,
  useForwardPropsEmits,
} from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<SwitchRootProps & { class?: HTMLAttributes['class'] }>()

const emits = defineEmits<SwitchRootEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <SwitchRoot
    v-bind="forwarded"
    :class="cn(
      'peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      props.class,
    )"
  >
    <SwitchThumb
      :class="cn('pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0')"
    >
      <slot name="thumb" />
    </SwitchThumb>
  </SwitchRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\tabs\Tabs.vue 的内容:
================================================================================
<script setup lang="ts">
import type { TabsRootEmits, TabsRootProps } from 'reka-ui'
import { TabsRoot, useForwardPropsEmits } from 'reka-ui'

const props = defineProps<TabsRootProps>()
const emits = defineEmits<TabsRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <TabsRoot v-bind="forwarded">
    <slot />
  </TabsRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\tabs\TabsContent.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { TabsContent, type TabsContentProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<TabsContentProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <TabsContent
    :class="cn('mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2', props.class)"
    v-bind="delegatedProps"
  >
    <slot />
  </TabsContent>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\tabs\TabsList.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { TabsList, type TabsListProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<TabsListProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <TabsList
    v-bind="delegatedProps"
    :class="cn(
      'inline-flex items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground',
      props.class,
    )"
  >
    <slot />
  </TabsList>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\tabs\TabsTrigger.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { TabsTrigger, type TabsTriggerProps, useForwardProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<TabsTriggerProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwardedProps = useForwardProps(delegatedProps)
</script>

<template>
  <TabsTrigger
    v-bind="forwardedProps"
    :class="cn(
      'inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow',
      props.class,
    )"
  >
    <span class="truncate">
      <slot />
    </span>
  </TabsTrigger>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\tetris\Tetris.vue 的内容:
================================================================================
<template>
  <Transition appear name="fade">
    <div :style="{
      '--cell': `${width / cols}px`,
      '--rows': rows - 1,
    }" :class="cn('relative w-full ', props.class)">
      <div ref="el" class="absolute inset-0 grid auto-rows-[--cell] justify-center -space-y-px">
        <div v-for="(row, rowIndex) in grid" :key="rowIndex"
          class="grid flex-1 auto-cols-[--cell] grid-flow-col -space-x-px">
          <div v-for="(cell, cellIndex) in row" :key="cellIndex" :style="{
            '--border-color': theme[100],
            '--dark-border-color': theme[900],
          }" class="relative border border-[--border-color] dark:border-[--dark-border-color]">
            <div :style="{
              '--square-color': theme[500],
              '--square-hover-color': theme[400],
              '--dark-square-color': theme[700],
              '--dark-square-hover-color': theme[600],
            }"
              class="absolute inset-0 bg-[--square-color] opacity-0 transition-opacity duration-1000 will-change-[opacity] hover:bg-[--square-hover-color] dark:bg-[--dark-square-color] dark:hover:bg-[--dark-square-hover-color]"
              :class="[cell && 'cursor-pointer opacity-60']" @click="cell && removeCell(rowIndex, cellIndex)" />
          </div>
        </div>
      </div>
    </div>
  </Transition>
</template>

<script setup lang="ts">
import { useElementSize } from '@vueuse/core';
import { cn } from '@/lib/utils';
import { getColors } from 'theme-colors';
import { ref, onMounted, onUnmounted, watch } from 'vue';

interface Props {
  class?: string;
  squareColor: string;
  base: number;
}

const props = withDefaults(defineProps<Props>(), {
  base: 10,
});

const theme = getColors(props.squareColor);

const el = ref(null);
const grid = ref<(boolean | null)[][]>([]);
const rows = ref(0);
const cols = ref(0);

const { width, height } = useElementSize(el);

function createGrid() {
  grid.value = [];

  for (let i = 0; i < rows.value; i++) {
    grid.value.push(new Array(cols.value).fill(null));
  }
}

function createNewCell() {
  const x = Math.floor(Math.random() * cols.value);

  grid.value[0][x] = true;
}

function moveCellsDown() {
  for (let row = rows.value - 1; row >= 0; row--) {
    for (let col = 0; col < cols.value; col++) {
      const cell = grid.value[row][col];
      const nextCell = Array.isArray(grid.value[row + 1]) ? grid.value[row + 1][col] : cell;
      if (cell !== null && nextCell === null) {
        grid.value[row + 1][col] = grid.value[row][col];
        grid.value[row][col] = null;
      }
    }
  }

  setTimeout(() => {
    const isFilled = grid.value[rows.value - 1].every((cell) => cell !== null);
    if (Array.isArray(grid.value[rows.value]) && isFilled) {
      for (let col = 0; col < cols.value; col++) {
        grid.value[rows.value][col] = null;
      }
    }
  }, 500);
}

function clearColumn() {
  const isFilled = grid.value[rows.value - 1].every((cell) => cell === true);
  if (!isFilled) return;

  for (let col = 0; col < cols.value; col++) {
    grid.value[rows.value - 1][col] = null;
  }
}

function removeCell(row: number, col: number) {
  grid.value[row][col] = null;
}

function calcGrid() {
  const cell = width.value / props.base;

  rows.value = Math.floor(height.value / cell);
  cols.value = Math.floor(width.value / cell);

  createGrid();
}

watch(width, calcGrid);

// eslint-disable-next-line no-undef
let intervalId: NodeJS.Timeout | undefined;
// eslint-disable-next-line no-undef
let timeoutId: NodeJS.Timeout | undefined;

onMounted(() => {
  timeoutId = setTimeout(calcGrid, 50);

  intervalId = setInterval(() => {
    clearColumn();
    moveCellsDown();
    createNewCell();
  }, 1000);
});

onUnmounted(() => {
  clearInterval(intervalId);
  clearTimeout(timeoutId);
});
</script>

<style scoped>
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
</style>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\textarea\Textarea.vue 的内容:
================================================================================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { useVModel } from '@vueuse/core'

const props = defineProps<{
  class?: HTMLAttributes['class']
  defaultValue?: string | number
  modelValue?: string | number
}>()

const emits = defineEmits<{
  (e: 'update:modelValue', payload: string | number): void
}>()

const modelValue = useVModel(props, 'modelValue', emits, {
  passive: true,
  defaultValue: props.defaultValue,
})
</script>

<template>
  <textarea v-model="modelValue" :class="cn('flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50', props.class)" />
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\toast\Toast.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastRoot, type ToastRootEmits, useForwardPropsEmits } from 'reka-ui'
import { computed } from 'vue'
import { type ToastProps, toastVariants } from '.'

const props = defineProps<ToastProps>()

const emits = defineEmits<ToastRootEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <ToastRoot
    v-bind="forwarded"
    :class="cn(toastVariants({ variant }), props.class)"
    @update:open="onOpenChange"
  >
    <slot />
  </ToastRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\toast\ToastAction.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastAction, type ToastActionProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastActionProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastAction v-bind="delegatedProps" :class="cn('inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive', props.class)">
    <slot />
  </ToastAction>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\toast\ToastClose.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { X } from 'lucide-vue-next'
import { ToastClose, type ToastCloseProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastCloseProps & {
  class?: HTMLAttributes['class']
}>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastClose v-bind="delegatedProps" :class="cn('absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600', props.class)">
    <X class="h-4 w-4" />
  </ToastClose>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\toast\ToastDescription.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastDescription, type ToastDescriptionProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastDescriptionProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastDescription :class="cn('text-sm opacity-90', props.class)" v-bind="delegatedProps">
    <slot />
  </ToastDescription>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\toast\Toaster.vue 的内容:
================================================================================
<script setup lang="ts">
import { isVNode } from 'vue'
import { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from '.'
import { useToast } from './use-toast'

const { toasts } = useToast()
</script>

<template>
  <ToastProvider>
    <Toast v-for="toast in toasts" :key="toast.id" v-bind="toast">
      <div class="grid gap-1">
        <ToastTitle v-if="toast.title">
          {{ toast.title }}
        </ToastTitle>
        <template v-if="toast.description">
          <ToastDescription v-if="isVNode(toast.description)">
            <component :is="toast.description" />
          </ToastDescription>
          <ToastDescription v-else>
            {{ toast.description }}
          </ToastDescription>
        </template>
        <ToastClose />
      </div>
      <component :is="toast.action" />
    </Toast>
    <ToastViewport />
  </ToastProvider>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\toast\ToastProvider.vue 的内容:
================================================================================
<script setup lang="ts">
import { ToastProvider, type ToastProviderProps } from 'reka-ui'

const props = defineProps<ToastProviderProps>()
</script>

<template>
  <ToastProvider v-bind="props">
    <slot />
  </ToastProvider>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\toast\ToastTitle.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastTitle, type ToastTitleProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastTitleProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastTitle v-bind="delegatedProps" :class="cn('text-sm font-semibold [&+div]:text-xs', props.class)">
    <slot />
  </ToastTitle>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\toast\ToastViewport.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { ToastViewport, type ToastViewportProps } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

const props = defineProps<ToastViewportProps & { class?: HTMLAttributes['class'] }>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})
</script>

<template>
  <ToastViewport v-bind="delegatedProps" :class="cn('fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]', props.class)" />
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\tooltip\Tooltip.vue 的内容:
================================================================================
<script setup lang="ts">
import { TooltipRoot, type TooltipRootEmits, type TooltipRootProps, useForwardPropsEmits } from 'reka-ui'

const props = defineProps<TooltipRootProps>()
const emits = defineEmits<TooltipRootEmits>()

const forwarded = useForwardPropsEmits(props, emits)
</script>

<template>
  <TooltipRoot v-bind="forwarded">
    <slot />
  </TooltipRoot>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\tooltip\TooltipContent.vue 的内容:
================================================================================
<script setup lang="ts">
import { cn } from '@/lib/utils'
import { TooltipContent, type TooltipContentEmits, type TooltipContentProps, TooltipPortal, useForwardPropsEmits } from 'reka-ui'
import { computed, type HTMLAttributes } from 'vue'

defineOptions({
  inheritAttrs: false,
})

const props = withDefaults(defineProps<TooltipContentProps & { class?: HTMLAttributes['class'] }>(), {
  sideOffset: 4,
})

const emits = defineEmits<TooltipContentEmits>()

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props

  return delegated
})

const forwarded = useForwardPropsEmits(delegatedProps, emits)
</script>

<template>
  <TooltipPortal>
    <TooltipContent v-bind="{ ...forwarded, ...$attrs }" :class="cn('z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2', props.class)">
      <slot />
    </TooltipContent>
  </TooltipPortal>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\tooltip\TooltipProvider.vue 的内容:
================================================================================
<script setup lang="ts">
import { TooltipProvider, type TooltipProviderProps } from 'reka-ui'

const props = defineProps<TooltipProviderProps>()
</script>

<template>
  <TooltipProvider v-bind="props">
    <slot />
  </TooltipProvider>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\components\ui\tooltip\TooltipTrigger.vue 的内容:
================================================================================
<script setup lang="ts">
import { TooltipTrigger, type TooltipTriggerProps } from 'reka-ui'

const props = defineProps<TooltipTriggerProps>()
</script>

<template>
  <TooltipTrigger v-bind="props">
    <slot />
  </TooltipTrigger>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\pages\index.vue 的内容:
================================================================================
<template>
  <div class="container mx-auto px-4 py-12 max-w-7xl bg-slate-50">
    <!-- 顶部标题区域 -->
    <div class="text-center mb-10">
      <h1 class="text-5xl font-custom-bold mb-4">
        <span class="gradient-text">MathModelAgent</span>
      </h1>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto">
        专为数学建模设计的智能助手，让复杂的数学建模工作变得简单高效
      </p>
    </div>

    <!-- Bento Grid 布局 -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
      <!-- 主卖点卡片 - 跨越2列2行 -->
      <div class="bento-card bg-white p-8 shadow-md md:col-span-2 md:row-span-2">
        <h2 class="text-2xl font-semibold mb-4 text-b">数学建模的革命性突破</h2>
        <div class="space-y-6">
          <div class="flex items-start" v-for="(item, idx) in mainPoints" :key="idx">
            <div class="flex-shrink-0 mr-4">
              <div class="w-12 h-12 rounded-full gradient-bg flex items-center justify-center">
                <component :is="item.icon" class="w-6 h-6 text-white" />
              </div>
            </div>
            <div>
              <h3 class="text-xl font-semibold mb-1">{{ item.title }}</h3>
              <p class="text-gray-600">{{ item.desc }}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- 核心功能卡片 -->
      <div class="bento-card bg-white p-6 shadow-md md:col-span-2">
        <div class="flex items-center mb-4">
          <Sparkles class="w-6 h-6 text-light-purple mr-2" />
          <h2 class="text-xl font-semibold">核心功能</h2>
        </div>
        <div class="grid grid-cols-2 gap-4">
          <div class="flex items-start" v-for="(item, idx) in coreFeatures" :key="idx">
            <component :is="item.icon" class="w-5 h-5 text-deep-purple mr-2 mt-0.5" />
            <p class="text-sm text-gray-600">{{ item.text }}</p>
          </div>
        </div>
      </div>

      <!-- 多智能体架构卡片 -->
      <div class="bento-card bg-white p-6 shadow-md">
        <div class="flex items-center mb-4">
          <Cpu class="w-6 h-6 text-light-purple mr-2" />
          <h2 class="text-xl font-semibold">多智能体系统</h2>
        </div>
        <div class="flex flex-col space-y-3">
          <div class="bg-gray-50 p-2 rounded-lg" v-for="(item, idx) in agents" :key="idx">
            <p class="text-sm font-medium">{{ item.role }}</p>
            <p class="text-xs text-gray-500">{{ item.desc }}</p>
          </div>
        </div>
      </div>

      <!-- 技术支持卡片 -->
      <div class="bento-card bg-white p-6 shadow-md">
        <div class="flex items-center mb-4">
          <CheckCircle class="w-6 h-6 text-light-purple mr-2" />
          <h2 class="text-xl font-semibold">技术支持</h2>
        </div>
        <div class="flex flex-wrap gap-2">
          <span v-for="(item, idx) in techs" :key="idx"
            class="px-3 py-1 bg-gray-100 rounded-full text-xs font-medium">{{ item }}</span>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
      <!-- 效率对比卡片 -->
      <div class="bento-card bg-white p-6 shadow-md">
        <div class="flex items-center mb-4">
          <BarChart2 class="w-6 h-6 text-light-purple mr-2" />
          <h2 class="text-xl font-semibold">效率提升</h2>
        </div>
        <div class="space-y-4">
          <div>
            <div class="flex justify-between mb-1">
              <span class="text-sm font-medium">传统方法</span>
              <span class="text-sm font-medium">72小时</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-gray-400 h-2.5 rounded-full" style="width: 100%"></div>
            </div>
          </div>
          <div>
            <div class="flex justify-between mb-1">
              <span class="text-sm font-medium">MathModelAgent</span>
              <span class="text-sm font-medium">1小时</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="gradient-bg h-2.5 rounded-full" style="width: 1.4%"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- 未来规划卡片 -->
      <div class="bento-card bg-white p-6 shadow-md">
        <div class="flex items-center mb-4">
          <Calendar class="w-6 h-6 text-light-purple mr-2" />
          <h2 class="text-xl font-semibold">未来规划</h2>
        </div>
        <ul class="space-y-2 text-sm text-gray-600">
          <li class="flex items-start" v-for="(item, idx) in plans" :key="idx">
            <Check class="w-4 h-4 text-deep-purple mr-2 mt-0.5" />
            <span>{{ item }}</span>
          </li>
        </ul>
      </div>

      <!-- CTA卡片 -->
      <div class="bento-card bg-gray-900 p-6 shadow-md text-white">
        <h2 class="text-xl font-semibold mb-4">立即开启您的建模之旅</h2>
        <p class="text-gray-300 mb-6">体验革命性的数学建模助手，节省时间，提高效率</p>
        <button class="w-full py-3 px-6 rounded-lg gradient-bg font-medium hover:opacity-90 transition-opacity"
          @click="router.push('/chat')">
          立即体验
        </button>
      </div>

    </div>

    <!-- 底部信息卡片 -->
    <div class="bento-card bg-white p-6 shadow-md">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <h3 class="text-lg font-semibold mb-2 gradient-text">关于我们</h3>
          <p class="text-sm text-gray-600">
            我们致力于通过人工智能技术简化数学建模过程，为学生和研究人员提供高效的解决方案。
          </p>
        </div>
        <div>
          <h3 class="text-lg font-semibold mb-2 gradient-text">适用场景</h3>
          <p class="text-sm text-gray-600">
            数学建模竞赛、学术研究、数据分析项目、科研论文写作、教学辅助工具。
          </p>
        </div>
        <div>
          <h3 class="text-lg font-semibold mb-2 gradient-text">联系我们</h3>
          <div class="flex space-x-4">
            <a :href=QQ_GROUP target="_blank" class="text-gray-400 hover:text-deep-purple">
              <svg t="1746706045339" class="icon" viewBox="0 0 1024 1024" version="1.1"
                xmlns="http://www.w3.org/2000/svg" p-id="4879" width="20" height="20">
                <path
                  d="M824.8 613.2c-16-51.4-34.4-94.6-62.7-165.3C766.5 262.2 689.3 112 511.5 112 331.7 112 256.2 265.2 261 447.9c-28.4 70.8-46.7 113.7-62.7 165.3-34 109.5-23 154.8-14.6 155.8 18 2.2 70.1-82.4 70.1-82.4 0 49 25.2 112.9 79.8 159-26.4 8.1-85.7 29.9-71.6 53.8 11.4 19.3 196.2 12.3 249.5 6.3 53.3 6 238.1 13 249.5-6.3 14.1-23.8-45.3-45.7-71.6-53.8 54.6-46.2 79.8-110.1 79.8-159 0 0 52.1 84.6 70.1 82.4 8.5-1.1 19.5-46.4-14.5-155.8z"
                  p-id="4880"></path>
              </svg>
            </a>
            <a :href=GITHUB_LINK class="text-gray-400 hover:text-deep-purple">
              <Github class="w-5 h-5" />
            </a>
            <a :href=TWITTER class="text-gray-400 hover:text-deep-purple">
              <Twitter class="w-5 h-5" />
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import {
  Clock,
  Award,
  FileText,
  Sparkles,
  Search,
  Code,
  File,
  Users,
  Layers,
  Wallet,
  Cpu,
  CheckCircle,
  BarChart2,
  Calendar,
  Check,
  Mail,
  Github,
  Twitter
} from 'lucide-vue-next'


import { useRouter } from 'vue-router'
import { QQ_GROUP, GITHUB_LINK, TWITTER } from '@/utils/const'

const router = useRouter()

const mainPoints = [
  {
    icon: Clock,
    title: '3天 → 1小时',
    desc: '将传统3天的比赛时间缩短至1小时，极大提升工作效率'
  },
  {
    icon: Award,
    title: '获奖级建模论文',
    desc: '自动完成一份可以获奖级别的数学建模论文，无需人工干预'
  },
  {
    icon: FileText,
    title: '完整解决方案',
    desc: '从问题分析到论文提交，一站式解决数学建模全流程'
  }
]

const coreFeatures = [
  { icon: Search, text: '自动分析问题与数学建模' },
  { icon: Code, text: '本地代码解释器' },
  { icon: File, text: '排版完整的论文生成' },
  { icon: Users, text: '多智能体协作系统' },
  { icon: Layers, text: '多种LLM模型支持' },
  { icon: Wallet, text: '低成本Agentless架构' }
]

const agents = [
  { role: '建模手', desc: '负责数学建模与分析' },
  { role: '代码手', desc: '编写代码与反思优化' },
  { role: '论文手', desc: '生成符合规范的论文' }
]

const techs = [
  'R语言', 'MATLAB', 'LaTeX模板', '视觉模型', '文献引用', '流程图绘制', '英文支持', '美赛适配'
]

const plans = [
  '更多数学建模测试案例支持',
  '引入用户交互（选择模型，重写等）',
  '代码解释器接入云端（e2b等供应商）'
]
</script>

<style scoped>
.gradient-text {
  background: linear-gradient(to right, #C084FC, #7E22CE);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
}

.gradient-bg {
  background: linear-gradient(to right, #C084FC, #7E22CE);
}

.bento-card {
  border-radius: 20px;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.bento-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}
</style>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\pages\chat\index.vue 的内容:
================================================================================
<script setup lang="ts">


import AppSidebar from '@/components/AppSidebar.vue'
import UserStepper from '@/components/UserStepper.vue'
import ModelingExamples from '@/components/ModelingExamples.vue'
import { onMounted } from 'vue'
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from '@/components/ui/sidebar'
import { getHelloWorld } from '@/apis/commonApi'
import Button from '@/components/ui/button/Button.vue'
import { AppWindow } from 'lucide-vue-next'
onMounted(() => {
  getHelloWorld().then((res) => {
    console.log(res.data)
  })
})
</script>

<template>

  <SidebarProvider>
    <AppSidebar />
    <SidebarInset>
      <header class="flex h-16 shrink-0 items-center gap-2 px-4">
        <SidebarTrigger class="-ml-1" />
        <div class="flex justify-end w-full">
          <a href="https://www.mathmodel.top/" target="_blank">
            <Button variant="outline">
              <AppWindow />
              官网
            </Button>
          </a>
        </div>
      </header>

      <div class="py-5 px-4">
        <div class="space-y-6">
          <div class="text-center space-y-2 mb-10">
            <h1 class="text-2xl font-semibold">MathModelAgent</h1>
            <p class="text-muted-foreground">
              让 Agent 数学建模，代码编写，论文写作
            </p>
          </div>

          <UserStepper>
          </UserStepper>
          <div class="text-center text-xs text-muted-foreground mt-8">
            项目处于内测阶段，欢迎进群反馈
          </div>
          <ModelingExamples />
        </div>
      </div>
    </SidebarInset>
  </SidebarProvider>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\pages\chat\components\ApiDialog.vue 的内容:
================================================================================
<script setup lang="ts">
import { ref, onMounted, computed } from 'vue'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { useApiKeyStore } from '@/stores/apiKeys'
import { CheckCircle, XCircle } from 'lucide-vue-next'
import { validateApiKey, saveApiConfig } from '@/apis/apiKeyApi'

const apiKeyStore = useApiKeyStore()

// 本地表单数据
const form = ref<{
  coordinator: { apiKey: string; baseUrl: string; modelId: string };
  modeler: { apiKey: string; baseUrl: string; modelId: string };
  coder: { apiKey: string; baseUrl: string; modelId: string };
  writer: { apiKey: string; baseUrl: string; modelId: string };
}>({
  coordinator: {
    apiKey: '',
    baseUrl: '',
    modelId: ''
  },
  modeler: {
    apiKey: '',
    baseUrl: '',
    modelId: ''
  },
  coder: {
    apiKey: '',
    baseUrl: '',
    modelId: ''
  },
  writer: {
    apiKey: '',
    baseUrl: '',
    modelId: ''
  }
})

// 验证状态
const validating = ref(false)
const validationResults = ref({
  coordinator: { valid: false, message: '' },
  modeler: { valid: false, message: '' },
  coder: { valid: false, message: '' },
  writer: { valid: false, message: '' }
})

// 计算所有验证是否都通过
const allValid = computed(() => {
  return Object.values(validationResults.value).every(result => result.valid)
})

// 模型配置列表
const modelConfigs = computed(() => [
  { key: 'coordinator', label: '协调者模型配置' },
  { key: 'modeler', label: '建模手模型配置' },
  { key: 'coder', label: '代码手模型配置' },
  { key: 'writer', label: '论文手模型配置' }
])

// 从 store 加载数据到表单
const loadFromStore = () => {
  form.value.coordinator = { ...apiKeyStore.coordinatorConfig }
  form.value.modeler = { ...apiKeyStore.modelerConfig }
  form.value.coder = { ...apiKeyStore.coderConfig }
  form.value.writer = { ...apiKeyStore.writerConfig }
}

// 保存表单数据到 store
const saveToStore = async () => {
  // 先保存到前端 store
  apiKeyStore.setCoordinatorConfig(form.value.coordinator)
  apiKeyStore.setModelerConfig(form.value.modeler)
  apiKeyStore.setCoderConfig(form.value.coder)
  apiKeyStore.setWriterConfig(form.value.writer)

  // 如果验证成功，也保存到后端设置
  if (allValid.value) {
    try {
      await saveApiConfig({
        coordinator: form.value.coordinator,
        modeler: form.value.modeler,
        coder: form.value.coder,
        writer: form.value.writer
      })
    } catch (error) {
      console.error('保存配置到后端失败:', error)
    }
  }
}

// 组件挂载时加载数据
onMounted(() => {
  loadFromStore()
})

// 定义 emits
const emit = defineEmits<{ (e: 'update:open', value: boolean): void }>()

// 定义 props
const props = defineProps<{ open: boolean }>()

// 更新 open 状态
const updateOpen = (value: boolean) => {
  emit('update:open', value)
}

// 保存并关闭
const saveAndClose = async () => {
  await saveToStore()
  updateOpen(false)
}

// 验证大模型 API Key
const validateModelApiKey = async (config: { apiKey: string, baseUrl: string, modelId: string }) => {
  if (!config.apiKey) {
    return { valid: false, message: 'API Key 为空' }
  }

  if (!config.modelId) {
    return { valid: false, message: 'Model ID 为空' }
  }

  try {
    // 调用后端验证接口
    const result = await validateApiKey({
      api_key: config.apiKey,
      base_url: config.baseUrl || 'https://api.openai.com/v1',
      model_id: config.modelId
    })

    return {
      valid: result.data.valid,
      message: result.data.message
    }
  } catch (error) {
    return {
      valid: false,
      message: '✗ 验证失败: 无法连接到验证服务'
    }
  }
}

// 一键验证所有 API Keys
const validateAllApiKeys = async () => {
  validating.value = true

  // 只清空验证结果，保留用户输入的数据
  validationResults.value = {
    coordinator: { valid: false, message: '' },
    modeler: { valid: false, message: '' },
    coder: { valid: false, message: '' },
    writer: { valid: false, message: '' }
  }

  try {


    // 在 E2B 验证后等待 500ms
    await new Promise(resolve => setTimeout(resolve, 500))

    // 逐个验证各模型 API Keys，避免并发请求
    for (const config of modelConfigs.value) {
      const key = config.key as keyof typeof validationResults.value
      const formKey = config.key as keyof typeof form.value

      // 设置当前验证中状态
      validationResults.value[key] = { valid: false, message: '验证中...' }

      // 验证当前配置
      validationResults.value[key] = await validateModelApiKey(form.value[formKey] as { apiKey: string, baseUrl: string, modelId: string })

      // 每次验证后等待 1 秒，避免触发速率限制
      await new Promise(resolve => setTimeout(resolve, 1000))
    }
  } catch (error) {
    console.error('验证过程中发生错误:', error)
    // 显示全局错误
    for (const key of Object.keys(validationResults.value)) {
      if (!validationResults.value[key as keyof typeof validationResults.value].message) {
        validationResults.value[key as keyof typeof validationResults.value] = {
          valid: false,
          message: '验证过程中发生未知错误'
        }
      }
    }
  } finally {
    validating.value = false
  }
}

const links = {
  "DeepSeek": {
    "url": "https://platform.deepseek.com/api_keys",
    "key": "DeepSeek",
    "BaseURL": "https://api.deepseek.com",
    "ModelID": "deepseek/deepseek-chat"
  },
  "硅基流动": {
    "url": "https://cloud.siliconflow.cn/i/UIb4Enf4",
    "key": "硅基流动",
    "BaseURL": "https://api.siliconflow.cn",
    "ModelID": "openai/deepseek-ai/DeepSeek-V3"
  },
  "Sophnet": {
    "url": "https://www.sophnet.com/#?code=AZBSFG",
    "key": "Sophnet",
    "BaseURL": "https://www.sophnet.com/api/open-apis",
    "ModelID": "openai/DeepSeek-V3-Fast"
  },
  "OpenAI": {
    "url": "https://platform.openai.com/api-keys",
    "key": "OpenAI",
    "BaseURL": "https://api.openai.com",
    "ModelID": "openai/gpt-4o"
  }
}

</script>

<template>
  <Dialog :open="props.open" @update:open="updateOpen">
    <DialogContent class="max-w-xl max-h-[85vh] overflow-y-auto">
      <DialogHeader>
        <DialogTitle>API Key 设置</DialogTitle>
        <DialogDescription>
          为每个 Agent 配置合适模型
          <br>
          <div class="">
            <div v-for="link in links" :key="link.key">
              <div class="flex flex-col gap-1">
                <a :href="link.url" target="_blank" class="text-blue-600 hover:text-blue-800 underline text-xs">
                  {{ link.key }}
                </a>
                <div class="text-xs text-muted-foreground">
                  Base URL: {{ link.BaseURL }}
                </div>
                <div class="text-xs text-muted-foreground">
                  Model ID: {{ link.ModelID }}
                </div>
              </div>
            </div>
          </div>
          <div><a href="https://docs.litellm.ai/docs/providers" target="_blank"
              class="text-blue-600 hover:text-blue-800 underline text-xs">
              more details
            </a>
          </div>
        </DialogDescription>
      </DialogHeader>

      <div class="space-y-4 py-2">

        <!-- Models Configurations -->
        <div v-for="config in modelConfigs" :key="config.key" class="space-y-2">
          <h3 class="text-sm font-medium">{{ config.label }}</h3>
          <div class="grid grid-cols-1 gap-2">
            <div class="space-y-1">
              <Label :for="`${config.key}-api-key`" class="text-xs text-muted-foreground">API Key</Label>
              <div class="flex items-center gap-2">
                <Input :id="`${config.key}-api-key`" v-model="(form as any)[config.key].apiKey" type="password"
                  placeholder="请输入 API Key" class="h-7 text-xs flex-1" />
                <div v-if="validationResults[config.key as keyof typeof validationResults].message"
                  class="flex items-center">
                  <CheckCircle v-if="validationResults[config.key as keyof typeof validationResults].valid"
                    class="h-4 w-4 text-green-500" />
                  <XCircle v-else class="h-4 w-4 text-red-500" />
                </div>
              </div>
            </div>
            <div class="grid grid-cols-2 gap-2">
              <div class="space-y-1">
                <Label :for="`${config.key}-base-url`" class="text-xs text-muted-foreground">Base URL</Label>
                <Input :id="`${config.key}-base-url`" v-model="(form as any)[config.key].baseUrl"
                  placeholder="https://api.deepseek.com" class="h-7 text-xs" />
              </div>
              <div class="space-y-1">
                <Label :for="`${config.key}-model-id`" class="text-xs text-muted-foreground">Model ID</Label>
                <Input :id="`${config.key}-model-id`" v-model="(form as any)[config.key].modelId"
                  placeholder="provider/model_id" class="h-7 text-xs" />
              </div>
            </div>
            <div v-if="validationResults[config.key as keyof typeof validationResults].message" :class="[
              'text-xs px-2 py-1 rounded text-left border',
              validationResults[config.key as keyof typeof validationResults].valid ? 'bg-green-50 text-green-700 border-green-200' : 'bg-red-50 text-red-700 border-red-200'
            ]">
              {{ validationResults[config.key as keyof typeof validationResults].message }}
            </div>
          </div>
        </div>
      </div>

      <div class="flex justify-between items-center pt-3 border-t">
        <Button @click="validateAllApiKeys" :disabled="validating" class="h-7 text-xs px-3" variant="secondary">
          {{ validating ? '验证中...' : '一键验证' }}
        </Button>
        <div class="flex space-x-2">
          <Button variant="outline" @click="updateOpen(false)" class="h-7 text-xs px-3">
            取消
          </Button>
          <Button v-if="allValid" @click="saveAndClose" class="h-7 text-xs px-3">
            保存
          </Button>
        </div>
      </div>
    </DialogContent>
  </Dialog>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\pages\example\[id].vue 的内容:
================================================================================
<script setup lang="ts">
import { ref, onMounted } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { Button } from '@/components/ui/button'

// 导入图片资源
import huashuCup from '@/assets/example/华数杯2023年C题.png'
import mcmProblemC1 from '@/assets/example/2025-51MCM-Problem C_01.png'
import mcmProblemC2 from '@/assets/example/2025-51MCM-Problem C_02.png'

// 图片映射表
const imageMap: Record<number, string> = {
  1: huashuCup,
  2: mcmProblemC1,
  3: mcmProblemC2
}

interface ModelingExample {
  id: number
  title: string
  source: string
  description: string
  tags: string[]
  problemText: string
  image?: string
}

const route = useRoute()
const router = useRouter()
const exampleId = route.params.id as string
const example = ref<ModelingExample | null>(null)
const loading = ref(true)

onMounted(() => {
  // 从localStorage获取样例数据
  const storedExample = localStorage.getItem('viewingExample')
  if (storedExample) {
    const parsedExample = JSON.parse(storedExample) as ModelingExample
    // 确保示例有图片属性，如果没有，从映射中获取
    if (!parsedExample.image && imageMap[parsedExample.id]) {
      parsedExample.image = imageMap[parsedExample.id]
    }
    example.value = parsedExample
    loading.value = false
  } else {
    // 如果没有找到缓存的数据，可以模拟一个API请求
    // 实际项目中应该从API获取
    setTimeout(() => {
      const id = parseInt(exampleId)
      example.value = {
        id,
        title: "数学建模样例案例",
        source: "全国大学生数学建模竞赛",
        description: "这是一个示例数模案例。",
        tags: ["数据分析", "算法优化"],
        problemText: "这里是完整的竞赛题目描述文本。",
        image: imageMap[id] || mcmProblemC1
      }
      loading.value = false
    }, 800)
  }
})

// 基于当前样例开始新任务
const startModelingTask = () => {
  if (example.value) {
    localStorage.setItem('selectedExample', JSON.stringify(example.value))
    router.push('/task/create')
  }
}

// 返回样例列表
const goBack = () => {
  router.push('/chat')
}
</script>

<template>
  <div class="container mx-auto py-8 px-4 max-w-4xl">
    <Button variant="ghost" class="mb-6" @click="goBack">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
        <path d="m15 18-6-6 6-6" />
      </svg>
      返回首页
    </Button>

    <div v-if="loading" class="flex justify-center py-12">
      <div class="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full"></div>
    </div>

    <div v-else-if="example" class="space-y-8">
      <div class="space-y-4">
        <h1 class="text-2xl font-semibold">{{ example.title }}</h1>
        <p class="text-muted-foreground">{{ example.source }}</p>
        <div class="flex flex-wrap gap-2 mt-4">
          <span v-for="tag in example.tags" :key="tag"
            class="px-3 py-1 bg-primary/10 text-primary rounded-full text-sm">
            {{ tag }}
          </span>
        </div>
      </div>

      <!-- 题目图片 -->
      <div v-if="example.image" class="rounded-lg overflow-hidden border">
        <img :src="example.image" alt="题目图片" class="w-full h-auto" />
      </div>

      <div class="space-y-4">
        <h2 class="text-xl font-medium">题目描述</h2>
        <div class="p-6 border rounded-lg bg-muted/20">
          <p class="whitespace-pre-line">{{ example.problemText }}</p>
        </div>
      </div>

      <div class="space-y-4">
        <h2 class="text-xl font-medium">解题思路</h2>
        <div class="p-6 border rounded-lg">
          <ol class="list-decimal list-inside space-y-3">
            <li>分析问题背景和关键变量</li>
            <li>收集和预处理相关数据</li>
            <li>构建数学模型并确定算法</li>
            <li>实现代码并训练模型</li>
            <li>验证模型并分析结果</li>
            <li>撰写论文并呈现结论</li>
          </ol>
        </div>
      </div>

      <div class="flex justify-center pt-6">
        <Button size="lg" @click="startModelingTask">
          基于此案例开始建模
        </Button>
      </div>
    </div>

    <div v-else class="text-center py-12">
      <p>未找到相关样例</p>
      <Button variant="outline" class="mt-4" @click="goBack">返回首页</Button>
    </div>
  </div>
</template>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\pages\login\index.vue 的内容:
================================================================================
<script lang="ts">
export const description = 'A login page with form and image.'
</script>

<script setup lang="ts">
import LoginForm from '@/components/LoginForm.vue'
import { GalleryVerticalEnd } from 'lucide-vue-next'
</script>

<template>
  <div class="flex min-h-svh flex-col items-center justify-center bg-muted p-6 md:p-10">
    <a href="#" class="flex items-center gap-2 self-center font-medium mb-8">
      <div class="flex h-6 w-6 items-center justify-center rounded-md bg-primary text-primary-foreground">
        <GalleryVerticalEnd class="size-4" />
      </div>
      Acme Inc.
    </a>
    <div class="w-full max-w-sm md:max-w-3xl">
      <LoginForm />
    </div>
  </div>
</template>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\pages\task\index.vue 的内容:
================================================================================
<script setup lang="ts">
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@/components/ui/resizable'
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs'
import CoderEditor from '@/components/AgentEditor/CoderEditor.vue'
import WriterEditor from '@/components/AgentEditor/WriterEditor.vue'
import ModelerEditor from '@/components/AgentEditor/ModelerEditor.vue'
import ChatArea from '@/components/ChatArea.vue'
import { onMounted, onBeforeUnmount, ref } from 'vue'
import { useTaskStore } from '@/stores/task'
import { getWriterSeque } from '@/apis/commonApi';
import { Button } from '@/components/ui/button';
import { openFolderAPI } from '@/apis/commonApi';
import { useToast } from '@/components/ui/toast/use-toast'
import { Folder } from 'lucide-vue-next'
const { toast } = useToast()


const props = defineProps<{ task_id: string }>()
const taskStore = useTaskStore()

const writerSequence = ref<string[]>([]);

// 项目运行时长相关
const startTime = ref<number>(Date.now())
const currentTime = ref<number>(Date.now())
let timer: ReturnType<typeof setInterval> | null = null

// 格式化运行时长
const formatDuration = (ms: number): string => {
  const seconds = Math.floor(ms / 1000)
  const hours = Math.floor(seconds / 3600)
  const minutes = Math.floor((seconds % 3600) / 60)
  const remainingSeconds = seconds % 60

  if (hours > 0) {
    return `${hours}h ${minutes}m ${remainingSeconds}s`
  } else if (minutes > 0) {
    return `${minutes}m ${remainingSeconds}s`
  } else {
    return `${remainingSeconds}s`
  }
}

// 计算运行时长
const runningDuration = ref<string>('0s')
const updateDuration = () => {
  currentTime.value = Date.now()
  runningDuration.value = formatDuration(currentTime.value - startTime.value)
}

console.log('Task ID:', props.task_id)

onMounted(async () => {
  taskStore.connectWebSocket(props.task_id)
  const res = await getWriterSeque();
  writerSequence.value = Array.isArray(res.data) ? res.data : [];

  // 开始计时
  timer = setInterval(updateDuration, 1000)
  updateDuration() // 立即更新一次
})

const openFolder = async () => {
  const res = await openFolderAPI(props.task_id);
  console.log(res);
  toast({
    title: '打开工作目录成功',
    description: res.data.message,
  })
}


onBeforeUnmount(() => {
  taskStore.closeWebSocket()
  // 清理计时器
  if (timer) {
    clearInterval(timer)
    timer = null
  }
})

</script>

<template>
  <div class="fixed inset-0">
    <ResizablePanelGroup direction="horizontal" class="h-full rounded-lg border">
      <ResizablePanel :default-size="40" class="h-full">
        <ChatArea :messages="taskStore.chatMessages" />
      </ResizablePanel>
      <ResizableHandle />
      <ResizablePanel :default-size="60" class="h-full min-w-0">
        <div class="flex h-full flex-col min-w-0">
          <Tabs default-value="modeler" class="w-full h-full flex flex-col">
            <!-- TODO: Agent 的状态 -->
            <div class="border-b px-4 py-1 flex justify-between">
              <div class="flex items-center gap-4">
                <div class="text-sm text-gray-600">
                  运行时长: <span class="font-mono text-blue-600">{{ runningDuration }}</span>
                </div>
                <TabsList>
                  <TabsTrigger value="modeler" class="text-sm">
                    ModelerAgent
                  </TabsTrigger>
                  <TabsTrigger value="coder" class="text-sm">
                    CoderAgent
                  </TabsTrigger>
                  <TabsTrigger value="writer" class="text-sm">
                    WriterAgent
                  </TabsTrigger>
                </TabsList>
              </div>
              <!--  TODO: 其他选项 -->

              <div class="flex justify-end gap-2 items-center">
                <Button @click="taskStore.downloadMessages" class="flex justify-end">
                  下载消息
                </Button>

                <Button @click="openFolder" class="flex">
                  <Folder class="w-5 h-5" /> workspace
                </Button>
              </div>

            </div>

            <TabsContent value="modeler" class="flex-1 p-1 min-w-0 h-full overflow-hidden">
              <ModelerEditor />
            </TabsContent>

            <TabsContent value="coder" class="flex-1 p-1 min-w-0 h-full overflow-hidden">
              <CoderEditor />
            </TabsContent>

            <TabsContent value="writer" class="flex-1 p-1 min-w-0 h-full overflow-hidden">
              <WriterEditor :messages="taskStore.writerMessages" :writerSequence="writerSequence" />
            </TabsContent>
          </Tabs>
        </div>
      </ResizablePanel>
    </ResizablePanelGroup>

  </div>
</template>

<style scoped></style>

================================================================================
E:\repo1\MathModelAgent-python\frontend\src\pages\test\index.vue 的内容:
================================================================================
<template>
  <Tetris class="h-screen w-full [mask-image:radial-gradient(450px_circle_at_center,#8A2BE2,transparent)]" :base="30"
    square-color="#8A2BE2" />
</template>

<script lang="ts" setup>
import Tetris from '@/components/ui/tetris/Tetris.vue'
</script>


================================================================================
E:\repo1\MathModelAgent-python\frontend\src\pages\test\testJupyter.vue 的内容:
================================================================================
<template>
  <div class="home">
    <button @click="add_md">添加</button>
    <button @click="prevPage">上一页</button>
    <button @click="nextPage">下一页</button>
    <RenderJupyterNotebook :notebook="{ ...notebook, cells: visibleCells }" />
  </div>
</template>

<script setup lang="ts">
import RenderJupyterNotebook from 'render-jupyter-notebook-vue'
import example from '@/assets/jupyter.json'
import { ref, computed } from 'vue'

const add_content = {
  "cell_type": "markdown",
  "metadata": {},
  "source": [
    "Compared to a table in a Markdown cell:\n",
    "\n",
    "\n",
    "<table style=\"width:100%\">\n",
    "    <thead>\n",
    "  <tr>\n",
    "    <th>Firstname</th>\n",
    "    <th>Lastname</th> \n",
    "    <th>Age</th>\n",
    "  </tr>\n",
    "  </thead>\n",
    "  <tr>\n",
    "    <td>Jill</td>\n",
    "    <td>Smith</td> \n",
    "    <td>50</td>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td>Eve</td>\n",
    "    <td>Jackson</td> \n",
    "    <td>94</td>\n",
    "  </tr>\n",
    "</table>"
  ]
}

const notebook = ref(JSON.parse(JSON.stringify(example))) // 深拷贝原始数据

// 添加分页相关状态
const pageSize = ref(10) // 每页显示的数量
const currentPage = ref(1)

// 计算当前页要显示的内容
const visibleCells = computed(() => {
  const start = (currentPage.value - 1) * pageSize.value
  const end = start + pageSize.value
  return notebook.value.cells.slice(start, end)
})

const add_md = () => {
  notebook.value.cells = [add_content, ...notebook.value.cells] // 使用展开运算符添加新内容
  console.log('add_md')
  console.log(notebook.value)
  currentPage.value = 1 // 添加新内容后回到第一页
}

// 分页控制
const nextPage = () => {
  if (currentPage.value * pageSize.value < notebook.value.cells.length) {
    currentPage.value++
  }
}

const prevPage = () => {
  if (currentPage.value > 1) {
    currentPage.value--
  }
}
</script>

